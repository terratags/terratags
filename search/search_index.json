{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terratags","text":"<p>Terratags is a tool for validating tags on AWS, Azure, and Google Cloud resources in Terraform configurations.</p>"},{"location":"#overview","title":"Overview","text":"<p>Consistent tagging is crucial for:</p> <ul> <li>Cost allocation and tracking</li> <li>Resource ownership identification</li> <li>Environment classification</li> <li>Security and compliance requirements</li> <li>Automation and resource management</li> </ul> <p>Terratags helps enforce these tagging standards across your infrastructure, ensuring that all resources are properly tagged according to your organization's policies.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Tag Validation: Validates required tags on AWS, Azure, and Google Cloud resources</li> <li>Pattern Matching: Advanced regex validation for tag values to enforce naming conventions</li> <li>Remote Config Files: Load configuration from HTTP/HTTPS URLs or Git repositories</li> <li>Default Tags Support: Supports AWS provider default_tags and Google provider default_labels</li> <li>AWSCC Support: Supports AWSCC provider tag format ( Refer exclusion list for resources with non compliant tag schema)</li> <li>Azure Support: Supports Azure providers (azurerm and azapi)</li> <li>Google Cloud Support: Supports Google Cloud provider with labels (GCP uses 'labels' instead of 'tags')</li> <li>Module-Level Tags: Supports module-level tags</li> <li>Exemption Support: Supports exemptions for specific resources</li> <li>HTML Reports: Generates HTML reports of tag compliance</li> <li>Auto-Remediation: Provides auto-remediation suggestions</li> <li>Plan Integration: Integrates with Terraform plan output</li> <li>Tag Inheritance: Tracks tag inheritance from provider default_tags/default_labels</li> <li>Exemption Tracking: Tracks and reports on exemptions</li> <li>Excluded Resources: Tracks AWSCC resources with non-compliant tag schemas</li> </ul> <p>Open issues for other providers: - Google provider - Azure providers : Keeping this open as there are additional Azure providers.</p>"},{"location":"#not-validated","title":"Not validated","text":"<ul> <li>The behavior with provider aliases is not tested and so the evaluation cannot be guaranteed.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Using Homebrew\nbrew install terratags/tap/terratags\n\n# Using Go\ngo install github.com/terratags/terratags@latest\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>terratags -config config.yaml -dir ./infra\n</code></pre> <p>Check out the documentation for more detailed information on configuration and usage.</p>"},{"location":"#sample-report","title":"Sample Report","text":"<p>When you generate an HTML report with Terratags, it will look similar to this:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Terraform Tag Compliance Report           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Generated on: 2025-05-16                           \u2502\n\u2502                                                     \u2502\n\u2502 Summary:                                            \u2502\n\u2502 \u2713 Total Resources: 4                                \u2502\n\u2502 \u2713 Compliant Resources: 2                            \u2502\n\u2502 \u2717 Non-compliant Resources: 2                        \u2502\n\u2502                                                     \u2502\n\u2502 [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------] 50.0%     \u2502\n\u2502                                                     \u2502\n\u2502 Non-compliant Resources:                            \u2502\n\u2502 \u2717 aws_s3_bucket \"data_bucket\"                       \u2502\n\u2502   Missing Tags: Environment, Owner, Project         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The HTML report provides a visual representation of tag compliance across your Terraform resources, making it easy to identify which resources need attention and track compliance metrics.</p>"},{"location":"architecture/","title":"Terratags Architecture","text":"<p>This document provides an overview of the Terratags architecture, design decisions, and internal workings.</p>"},{"location":"architecture/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Core Components</li> <li>Data Flow</li> <li>Configuration System</li> <li>Parsing Strategy</li> <li>Validation Engine</li> <li>Reporting System</li> <li>Design Decisions</li> </ul>"},{"location":"architecture/#overview","title":"Overview","text":"<p>Terratags is designed as a modular CLI tool that validates tag compliance across Terraform configurations. The architecture follows a pipeline pattern where Terraform files are parsed, resources are extracted, tags are validated, and reports are generated.</p> <pre><code>Input (Terraform Files) \u2192 Parser \u2192 Validator \u2192 Reporter \u2192 Output (Results/Reports)\n                            \u2191\n                      Configuration\n</code></pre>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#1-configuration-system-pkgconfig","title":"1. Configuration System (<code>pkg/config</code>)","text":"<p>The configuration system handles: - Loading configuration files (JSON/YAML) - Supporting both legacy array format and new object format with patterns - Compiling regex patterns for validation - Managing exemptions - Runtime configuration options</p> <p>Key Types: <pre><code>type Config struct {\n    RequiredTags  map[string]TagRequirement\n    Exemptions    []ResourceExemption\n    IgnoreTagCase bool\n}\n\ntype TagRequirement struct {\n    Pattern         string\n    compiledPattern *regexp.Regexp\n}\n</code></pre></p>"},{"location":"architecture/#2-parser-system-pkgparser","title":"2. Parser System (<code>pkg/parser</code>)","text":"<p>The parser system is responsible for: - Parsing Terraform files using HCL (HashiCorp Configuration Language) - Extracting resources and their tags - Handling different provider tag formats (AWS, Azure, AWSCC) - Processing provider default_tags - Supporting both directory scanning and Terraform plan analysis</p> <p>Key Types: <pre><code>type Resource struct {\n    Type       string\n    Name       string\n    Tags       map[string]string\n    Path       string\n    TagSources map[string]TagSource\n}\n\ntype ProviderConfig struct {\n    Type        string\n    DefaultTags map[string]string\n    Path        string\n}\n</code></pre></p>"},{"location":"architecture/#3-validation-engine-pkgvalidator","title":"3. Validation Engine (<code>pkg/validator</code>)","text":"<p>The validation engine performs: - Tag presence validation - Pattern matching validation using compiled regex - Exemption processing - Statistics collection - Violation tracking</p> <p>Key Types: <pre><code>type TagViolation struct {\n    ResourceType      string\n    ResourceName      string\n    MissingTags       []string\n    PatternViolations []PatternViolation\n    IsExempt          bool\n}\n\ntype TagComplianceStats struct {\n    TotalResources           int\n    CompliantResources       int\n    FullyExemptResources     int\n    PartiallyExemptResources int\n}\n</code></pre></p>"},{"location":"architecture/#4-logging-system-pkglogging","title":"4. Logging System (<code>pkg/logging</code>)","text":"<p>The logging system provides: - Structured logging using Zap - Multiple log levels (DEBUG, INFO, WARN, ERROR) - Custom console formatting - Print function for always-visible output</p>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#1-initialization-phase","title":"1. Initialization Phase","text":"<pre><code>main.go \u2192 Parse CLI flags \u2192 Load Configuration \u2192 Initialize Logging\n</code></pre>"},{"location":"architecture/#2-parsing-phase","title":"2. Parsing Phase","text":"<pre><code>Directory/Plan Input \u2192 HCL Parser \u2192 Resource Extraction \u2192 Tag Extraction\n</code></pre>"},{"location":"architecture/#3-validation-phase","title":"3. Validation Phase","text":"<pre><code>Resources + Config \u2192 Tag Validation \u2192 Pattern Validation \u2192 Exemption Processing\n</code></pre>"},{"location":"architecture/#4-reporting-phase","title":"4. Reporting Phase","text":"<pre><code>Violations + Stats \u2192 Console Output \u2192 HTML Report (optional) \u2192 Exit Code\n</code></pre>"},{"location":"architecture/#configuration-system","title":"Configuration System","text":""},{"location":"architecture/#configuration-loading","title":"Configuration Loading","text":"<p>The configuration system supports two formats for backward compatibility:</p> <p>Legacy Format (Array): <pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n</code></pre></p> <p>New Format (Object with Patterns): <pre><code>required_tags:\n  Name: {}\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n  Owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n</code></pre></p>"},{"location":"architecture/#pattern-compilation","title":"Pattern Compilation","text":"<p>Regex patterns are compiled once during configuration loading and stored in the <code>TagRequirement</code> struct for efficient validation.</p>"},{"location":"architecture/#exemption-system","title":"Exemption System","text":"<p>Exemptions allow fine-grained control over which resources are exempt from specific tag requirements:</p> <pre><code>exemptions:\n  - resource_type: aws_s3_bucket\n    resource_name: logs_bucket\n    exempt_tags: [Owner, Project]\n    reason: \"Legacy bucket used for system logs only\"\n</code></pre>"},{"location":"architecture/#parsing-strategy","title":"Parsing Strategy","text":""},{"location":"architecture/#hcl-vs-regex-parsing","title":"HCL vs Regex Parsing","text":"<p>Terratags uses a hybrid approach: - HCL Parser: Primary method for parsing Terraform files - Regex Fallback: Used for complex tag extraction patterns</p>"},{"location":"architecture/#provider-support","title":"Provider Support","text":"<p>Different providers have different tag formats:</p> <p>AWS Provider: <pre><code>tags = {\n  Environment = \"prod\"\n  Owner       = \"team-a\"\n}\n</code></pre></p> <p>AWSCC Provider: <pre><code>tags = [{\n  key   = \"Environment\"\n  value = \"prod\"\n}, {\n  key   = \"Owner\"\n  value = \"team-a\"\n}]\n</code></pre></p> <p>Azure Providers: <pre><code>tags = {\n  Environment = \"prod\"\n  Owner       = \"team-a\"\n}\n</code></pre></p>"},{"location":"architecture/#default-tags-handling","title":"Default Tags Handling","text":"<p>Provider default_tags are processed and merged with resource-level tags:</p> <ol> <li>Extract provider configurations</li> <li>Identify default_tags blocks</li> <li>Merge with resource tags during validation</li> <li>Track tag sources for reporting</li> </ol>"},{"location":"architecture/#validation-engine","title":"Validation Engine","text":""},{"location":"architecture/#validation-pipeline","title":"Validation Pipeline","text":"<ol> <li>Resource Filtering: Only validate taggable resources</li> <li>Tag Presence Check: Verify required tags exist</li> <li>Pattern Validation: Apply regex patterns if defined</li> <li>Exemption Processing: Apply exemptions</li> <li>Statistics Collection: Track compliance metrics</li> </ol>"},{"location":"architecture/#pattern-validation","title":"Pattern Validation","text":"<p>Pattern validation uses compiled regex patterns:</p> <pre><code>func (c *Config) ValidateTagValue(tagName, tagValue string) (bool, string) {\n    req, found := c.RequiredTags[tagName]\n    if !found || req.compiledPattern == nil {\n        return true, \"\"\n    }\n\n    if req.compiledPattern.MatchString(tagValue) {\n        return true, \"\"\n    }\n\n    return false, fmt.Sprintf(\"value '%s' does not match pattern '%s'\", \n        tagValue, req.Pattern)\n}\n</code></pre>"},{"location":"architecture/#case-sensitivity","title":"Case Sensitivity","text":"<p>The validation engine supports case-insensitive tag name matching through the <code>IgnoreTagCase</code> configuration option.</p>"},{"location":"architecture/#reporting-system","title":"Reporting System","text":""},{"location":"architecture/#console-output","title":"Console Output","text":"<p>The console output provides: - Violation details with resource information - Pattern violation explanations - Auto-remediation suggestions - Compliance statistics - Exemption summaries</p>"},{"location":"architecture/#html-reports","title":"HTML Reports","text":"<p>HTML reports include: - Visual compliance indicators - Detailed resource breakdowns - Tag source tracking - Exemption details with reasons - Interactive filtering and sorting</p>"},{"location":"architecture/#auto-remediation","title":"Auto-Remediation","text":"<p>The system can generate remediation suggestions: - Missing tag additions - Provider default_tags recommendations - Pattern fix suggestions</p>"},{"location":"architecture/#design-decisions","title":"Design Decisions","text":""},{"location":"architecture/#1-modular-architecture","title":"1. Modular Architecture","text":"<p>Decision: Separate packages for config, parser, validator, and logging.</p> <p>Rationale:  - Separation of concerns - Easier testing and maintenance - Clear interfaces between components</p>"},{"location":"architecture/#2-hcl-regex-hybrid-parsing","title":"2. HCL + Regex Hybrid Parsing","text":"<p>Decision: Use HCL parser as primary with regex fallback.</p> <p>Rationale: - HCL provides structured parsing - Regex handles edge cases and complex patterns - Maintains compatibility with various Terraform syntax styles</p>"},{"location":"architecture/#3-pattern-compilation-at-load-time","title":"3. Pattern Compilation at Load Time","text":"<p>Decision: Compile regex patterns during configuration loading.</p> <p>Rationale: - Better performance during validation - Early error detection for invalid patterns - Single compilation per pattern</p>"},{"location":"architecture/#4-backward-compatible-configuration","title":"4. Backward Compatible Configuration","text":"<p>Decision: Support both array and object configuration formats.</p> <p>Rationale: - Smooth migration path for existing users - Maintains compatibility with v0.2.x configurations - Allows gradual adoption of pattern features</p>"},{"location":"architecture/#5-tag-source-tracking","title":"5. Tag Source Tracking","text":"<p>Decision: Track where each tag comes from (resource vs provider default).</p> <p>Rationale: - Better debugging and reporting - Helps users understand tag inheritance - Enables more detailed compliance reports</p>"},{"location":"architecture/#6-exemption-system","title":"6. Exemption System","text":"<p>Decision: Flexible exemption system with reasons.</p> <p>Rationale: - Real-world compliance often requires exceptions - Audit trail for why exemptions exist - Fine-grained control over exemptions</p>"},{"location":"architecture/#7-statistics-and-reporting","title":"7. Statistics and Reporting","text":"<p>Decision: Comprehensive statistics collection and HTML reporting.</p> <p>Rationale: - Provides visibility into compliance posture - Supports compliance reporting requirements - Helps identify trends and patterns</p>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/#memory-usage","title":"Memory Usage","text":"<ul> <li>Resources are processed in batches</li> <li>Compiled patterns are reused</li> <li>Tag maps are created on-demand</li> </ul>"},{"location":"architecture/#cpu-usage","title":"CPU Usage","text":"<ul> <li>Regex patterns are compiled once</li> <li>File parsing is done sequentially</li> <li>Validation is optimized for common cases</li> </ul>"},{"location":"architecture/#scalability","title":"Scalability","text":"<p>Current limitations and considerations: - Single-threaded file processing - Memory usage grows with number of resources - Regex complexity can impact performance</p>"},{"location":"architecture/#error-handling","title":"Error Handling","text":""},{"location":"architecture/#error-categories","title":"Error Categories","text":"<ol> <li>Configuration Errors: Invalid config files, bad patterns</li> <li>Parsing Errors: Invalid Terraform syntax, file access issues</li> <li>Validation Errors: Pattern compilation failures</li> <li>Runtime Errors: File system issues, memory constraints</li> </ol>"},{"location":"architecture/#error-propagation","title":"Error Propagation","text":"<p>Errors are propagated up the call stack with context: <pre><code>if err := loadConfig(path); err != nil {\n    return fmt.Errorf(\"failed to load config from %s: %w\", path, err)\n}\n</code></pre></p>"},{"location":"architecture/#extension-points","title":"Extension Points","text":""},{"location":"architecture/#adding-new-providers","title":"Adding New Providers","text":"<ol> <li>Create resource type definitions</li> <li>Implement tag extraction logic</li> <li>Update parser to recognize provider</li> <li>Add provider-specific default_tags handling</li> </ol>"},{"location":"architecture/#adding-new-validation-rules","title":"Adding New Validation Rules","text":"<ol> <li>Extend <code>TagRequirement</code> struct</li> <li>Update configuration parsing</li> <li>Implement validation logic</li> <li>Add to validation pipeline</li> </ol>"},{"location":"architecture/#adding-new-output-formats","title":"Adding New Output Formats","text":"<ol> <li>Create new reporter interface</li> <li>Implement format-specific logic</li> <li>Integrate with main validation flow</li> <li>Add CLI options for new format</li> </ol> <p>This architecture provides a solid foundation for tag validation while maintaining flexibility for future enhancements and provider support.</p>"},{"location":"awscc_support/","title":"AWSCC Provider Support","text":"<p>Terratags now supports the AWS Cloud Control (AWSCC) provider's tag format, which differs from the standard AWS provider tag format.</p>"},{"location":"awscc_support/#tag-format-differences","title":"Tag Format Differences","text":""},{"location":"awscc_support/#aws-provider-tag-format","title":"AWS Provider Tag Format","text":"<p>The AWS provider uses a map of key-value pairs for tags:</p> <pre><code>resource \"aws_s3_bucket\" \"example\" {\n  bucket = \"example-bucket\"\n\n  tags = {\n    Name        = \"Example Bucket\"\n    Environment = \"Test\"\n    Owner       = \"DevOps\"\n    Project     = \"Terratags\"\n  }\n}\n</code></pre>"},{"location":"awscc_support/#awscc-provider-tag-format","title":"AWSCC Provider Tag Format","text":"<p>The AWSCC provider uses a list of maps with <code>key</code> and <code>value</code> fields:</p> <pre><code>resource \"awscc_apigateway_rest_api\" \"example\" {\n  name = \"example-api\"\n\n  tags = [\n    {\n      key   = \"Name\"\n      value = \"Example API\"\n    },\n    {\n      key   = \"Environment\"\n      value = \"Test\"\n    },\n    {\n      key   = \"Owner\"\n      value = \"API Team\"\n    },\n    {\n      key   = \"Project\"\n      value = \"Terratags\"\n    }\n  ]\n}\n</code></pre>"},{"location":"awscc_support/#default-tags-support","title":"Default Tags Support","text":"<p>Important: The AWSCC provider does not support <code>default_tags</code>. Each AWSCC resource must specify all required tags directly in its <code>tags</code> attribute.</p> <pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  # AWS provider supports default_tags\n  default_tags {\n    tags = {\n      Owner       = \"DevOps\"\n      Project     = \"Terratags\"\n    }\n  }\n}\n\nprovider \"awscc\" {\n  region = \"us-west-2\"\n  # AWSCC provider doesn't support default_tags\n}\n</code></pre>"},{"location":"awscc_support/#validation","title":"Validation","text":"<p>Terratags validates AWSCC resources by:</p> <ol> <li>Detecting resources with the <code>awscc_</code> prefix</li> <li>Parsing the list-of-maps tag format</li> <li>Validating that all required tags are present</li> <li>Reporting any missing tags</li> </ol>"},{"location":"awscc_support/#example","title":"Example","text":"<p>Here's a complete example showing both AWS and AWSCC resources with their respective tag formats:</p> <pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n    awscc = {\n      source  = \"hashicorp/awscc\"\n      version = \"~&gt; 0.67\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Owner       = \"DevOps\"\n      Project     = \"Terratags\"\n    }\n  }\n}\n\nprovider \"awscc\" {\n  region = \"us-west-2\"\n}\n\n# AWS resource with tags in map format\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"example-bucket\"\n\n  tags = {\n    Name        = \"Example Bucket\"\n    Environment = \"Test\"\n    # Owner and Project come from default_tags\n  }\n}\n\n# AWSCC resource with tags in list-of-maps format\nresource \"awscc_apigateway_rest_api\" \"example\" {\n  name = \"example-api\"\n\n  tags = [\n    {\n      key   = \"Name\"\n      value = \"Example API\"\n    },\n    {\n      key   = \"Environment\"\n      value = \"Test\"\n    },\n    {\n      key   = \"Owner\"\n      value = \"API Team\"\n    },\n    {\n      key   = \"Project\"\n      value = \"Terratags\"\n    }\n  ]\n}\n</code></pre>"},{"location":"awscc_support/#excluded-awscc-resources","title":"Excluded AWSCC Resources","text":"<p>Some AWSCC resources have non-compliant tag schemas and are excluded from validation. These resources are shown in a separate \"Excluded\" category in the compliance report.</p> <p>The compliance percentage calculation doesn't include these excluded resources, ensuring that your compliance metrics accurately reflect only the resources that should be properly tagged.</p> <p>Excluded resources include:  - <code>awscc_amplifyuibuilder_component</code> - <code>awscc_amplifyuibuilder_form</code> - <code>awscc_amplifyuibuilder_theme</code> - <code>awscc_apigatewayv2_api</code> - <code>awscc_apigatewayv2_domain_name</code> - <code>awscc_apigatewayv2_vpc_link</code> - <code>awscc_batch_compute_environment</code> - <code>awscc_batch_job_queue</code> - <code>awscc_batch_scheduling_policy</code> - <code>awscc_bedrock_agent</code> - <code>awscc_bedrock_agent_alias</code> - <code>awscc_bedrock_knowledge_base</code> - <code>awscc_eks_nodegroup</code> - <code>awscc_fis_experiment_template</code> - <code>awscc_greengrassv2_component_version</code> - And others with non-standard tag implementations</p> <p>These resources are identified in the HTML report in a dedicated \"Excluded Resources\" section.</p>"},{"location":"awscc_support/#sample-report-with-excluded-resources","title":"Sample Report with Excluded Resources","text":"<p>You can see an example of how excluded resources appear in the HTML report here: AWSCC Sample Report</p> <p></p> <p>This sample report shows how excluded resources are separated from the compliance calculation and displayed in their own section.</p>"},{"location":"azure-support/","title":"Azure Support in Terratags","text":"<p>Terratags now supports Azure resources through both the <code>azurerm</code> and <code>azapi</code> providers.</p>"},{"location":"azure-support/#azurerm-provider","title":"Azurerm Provider","text":"<p>The <code>azurerm</code> provider supports tagging at the resource level. Terratags will automatically detect and manage tags for resources that support the <code>tags</code> attribute.</p> <p>Example:</p> <pre><code>resource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-resources\"\n  location = \"West Europe\"\n\n  tags = {\n    environment = \"production\"\n    department  = \"finance\"\n  }\n}\n</code></pre> <p>Note: The <code>azurerm</code> provider does not support default_tags at the provider level.</p>"},{"location":"azure-support/#azapi-provider","title":"Azapi Provider","text":"<p>The <code>azapi</code> provider supports tagging at both the provider level (via <code>default_tags</code>) and at the resource level.</p> <p>Example with provider-level default tags:</p> <pre><code>provider \"azapi\" {\n  default_tags = {\n    managed_by = \"terraform\"\n    project    = \"terratags-example\"\n  }\n}\n</code></pre> <p>Example with resource-level tags:</p> <pre><code>resource \"azapi_resource\" \"example\" {\n  type      = \"Microsoft.Storage/storageAccounts@2022-05-01\"\n  name      = \"examplestorageaccount\"\n  parent_id = azurerm_resource_group.example.id\n  location  = azurerm_resource_group.example.location\n\n  body = jsonencode({\n    kind = \"StorageV2\"\n    sku = {\n      name = \"Standard_LRS\"\n    }\n  })\n\n  tags = {\n    environment = \"development\"\n    department  = \"research\"\n  }\n}\n</code></pre>"},{"location":"azure-support/#supported-resources","title":"Supported Resources","text":"<p>Terratags automatically detects which Azure resources support tagging by analyzing the provider schemas. The list of taggable resources is generated during the build process.</p> <p>For the most up-to-date list of supported resources, refer to the provider documentation: - Azurerm Provider - Azapi Provider</p>"},{"location":"ci-cd/","title":"CI/CD Integration","text":"<p>Note: This documentation is autogenerated. Please consult the individual CI documentation if any of the configuration looks incorrect. We would appreciate a PR if you find an issue.</p> <p>Integrating Terratags into your CI/CD pipeline helps enforce tag compliance across your infrastructure. This page provides examples of how to integrate Terratags with popular CI/CD platforms.</p>"},{"location":"ci-cd/#validation-approaches","title":"Validation Approaches","text":""},{"location":"ci-cd/#directory-validation-quick","title":"Directory Validation (Quick)","text":"<p>Suitable for fast feedback on file changes: - Validates direct resources and module calls - No provider credentials required - Fast execution</p>"},{"location":"ci-cd/#plan-validation-comprehensive","title":"Plan Validation (Comprehensive)","text":"<p>Recommended for production deployments: - Validates all resources including module-created ones - Requires provider credentials - Complete infrastructure coverage</p>"},{"location":"ci-cd/#github-actions","title":"GitHub Actions","text":""},{"location":"ci-cd/#directory-validation-fast","title":"Directory Validation (Fast)","text":"<pre><code>name: Validate Tags (Fast)\n\non:\n  pull_request:\n    paths:\n      - '**.tf'\n\njobs:\n  validate-tags:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: '1.24'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Validate Tags\n        run: terratags -config config.yaml -dir ./infra\n</code></pre>"},{"location":"ci-cd/#plan-validation-comprehensive_1","title":"Plan Validation (Comprehensive)","text":"<pre><code>name: Validate Tags (Complete)\n\non:\n  pull_request:\n    paths:\n      - '**.tf'\n\njobs:\n  validate-tags:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: '1.24'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}\n\n      - name: Terraform Init\n        run: terraform init\n\n      - name: Generate Plan and Validate\n        run: |\n          terraform plan -out=tfplan\n          terraform show -json tfplan &gt; plan.json\n          terratags -config config.yaml -plan plan.json -report report.html\n\n      - name: Upload Report\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: tag-validation-report\n          path: report.html\n</code></pre>"},{"location":"ci-cd/#gitlab-ci","title":"GitLab CI","text":""},{"location":"ci-cd/#directory-validation","title":"Directory Validation","text":"<pre><code>stages:\n  - validate\n\nvalidate-tags:\n  stage: validate\n  image: golang:1.24\n  script:\n    - go install github.com/terratags/terratags@latest\n    - terratags -config config.yaml -dir ./infra\n  only:\n    changes:\n      - \"**/*.tf\"\n</code></pre>"},{"location":"ci-cd/#azure-devops","title":"Azure DevOps","text":"<p>Add Terratags to your Azure DevOps pipeline:</p> <pre><code>trigger:\n  paths:\n    include:\n    - '**/*.tf'\n\npool:\n  vmImage: 'ubuntu-latest'\n\nsteps:\n- task: GoTool@0\n  inputs:\n    version: '1.24'\n\n- script: |\n    go install github.com/terratags/terratags@latest\n    terratags -config config.yaml -dir ./infra\n  displayName: 'Validate Tags'\n</code></pre>"},{"location":"ci-cd/#jenkins","title":"Jenkins","text":"<p>Add Terratags to your Jenkinsfile:</p> <pre><code>pipeline {\n    agent {\n        docker {\n            image 'golang:1.24'\n        }\n    }\n\n    stages {\n        stage('Validate Tags') {\n            when {\n                changeset \"**/*.tf\"\n            }\n            steps {\n                sh 'go install github.com/terratags/terratags@latest'\n                sh 'terratags -config config.yaml -dir ./infra'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ci-cd/#circleci","title":"CircleCI","text":"<p>Add Terratags to your CircleCI configuration:</p> <pre><code>version: 2.1\njobs:\n  validate-tags:\n    docker:\n      - image: cimg/go:1.24\n    steps:\n      - checkout\n      - run:\n          name: Install Terratags\n          command: go install github.com/terratags/terratags@latest\n      - run:\n          name: Validate Tags\n          command: terratags -config config.yaml -dir ./infra\n\nworkflows:\n  version: 2\n  terraform-workflow:\n    jobs:\n      - validate-tags:\n          filters:\n            paths:\n              - \"**/*.tf\"\n</code></pre>"},{"location":"ci-cd/#best-practices-for-cicd-integration","title":"Best Practices for CI/CD Integration","text":"<ol> <li>Fail Fast: Configure your pipeline to fail early if tag validation fails</li> <li>Generate Reports: Use the <code>-report</code> flag to generate HTML reports for each build</li> <li>Artifact Storage: Store the generated reports as build artifacts for easy access</li> <li>Selective Validation: Use path filters to only run validation when Terraform files change</li> <li>Pre-commit Hooks: Consider adding Terratags as a pre-commit hook for local validation before pushing</li> </ol>"},{"location":"ci-cd/#example-complete-github-actions-workflow","title":"Example: Complete GitHub Actions Workflow","text":"<p>Here's a more complete example for GitHub Actions that includes report generation and artifact storage:</p> <pre><code>name: Terraform Tag Validation\n\non:\n  pull_request:\n    paths:\n      - '**.tf'\n  push:\n    branches:\n      - main\n    paths:\n      - '**.tf'\n\njobs:\n  validate-tags:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: '1.24'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Validate Tags\n        run: terratags -config config.yaml -dir ./infra -report tag-report.html\n\n      - name: Upload Report\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: tag-validation-report\n          path: tag-report.html\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Terratags requires a configuration file that specifies which tags must be present on your AWS resources. This file can be in either YAML or JSON format.</p>"},{"location":"configuration/#required-tags-configuration","title":"Required Tags Configuration","text":""},{"location":"configuration/#simple-format-yaml","title":"Simple Format (YAML)","text":"<pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre>"},{"location":"configuration/#simple-format-json","title":"Simple Format (JSON)","text":"<pre><code>{\n  \"required_tags\": [\n    \"Name\",\n    \"Environment\",\n    \"Owner\",\n    \"Project\"\n  ]\n}\n</code></pre>"},{"location":"configuration/#pattern-validation-format-yaml","title":"Pattern Validation Format (YAML)","text":"<p>For advanced tag value validation using regular expressions:</p> <pre><code>required_tags:\n  Name:\n    pattern: \"^\\\\S+$\"  # No whitespace\n\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"  # Specific values only\n\n  Owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"  # Email format\n\n  Project:\n    pattern: \"^[A-Z]{2,4}-[0-9]{3,6}$\"  # Project code format\n\n  CostCenter:\n    pattern: \"^CC-[0-9]{4}$\"  # Cost center format\n</code></pre>"},{"location":"configuration/#mixed-format-yaml","title":"Mixed Format (YAML)","text":"<p>Combine simple and pattern validation:</p> <pre><code>required_tags:\n  # Pattern validation for critical tags\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n\n  # Simple validation for others\n  Name: {}\n  Project: {}\n</code></pre> <p>For comprehensive pattern matching documentation, see the Pattern Matching Guide.</p>"},{"location":"configuration/#command-options","title":"Command Options","text":"<p>Terratags supports the following command-line options:</p> <ul> <li><code>-config</code>, <code>-c</code>: Path to the config file (JSON/YAML) containing required tag keys (required)</li> <li><code>-dir</code>, <code>-d</code>: Path to the Terraform directory to analyze (default: current directory)</li> <li><code>-verbose</code>, <code>-v</code>: Enable verbose output</li> <li><code>-log-level</code>, <code>-l</code>: Set logging level: DEBUG, INFO, WARN, ERROR (default: ERROR)</li> <li><code>-plan</code>, <code>-p</code>: Path to Terraform plan JSON file to analyze</li> <li><code>-report</code>, <code>-r</code>: Path to output HTML report file</li> <li><code>-remediate</code>, <code>-re</code>: Show auto-remediation suggestions for non-compliant resources</li> <li><code>-exemptions</code>, <code>-e</code>: Path to exemptions file (JSON/YAML)</li> <li><code>-ignore-case</code>, <code>-i</code>: Ignore case when comparing required tag keys</li> <li><code>-help</code>, <code>-h</code>: Show help message</li> <li><code>-version</code>, <code>-V</code>: Show version information</li> </ul>"},{"location":"configuration/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Start Simple: Begin with a small set of required tags and gradually expand</li> <li>Be Consistent: Use consistent naming conventions for your tags</li> <li>Document Purpose: Include comments in your configuration files explaining the purpose of each tag</li> <li>Version Control: Keep your configuration files in version control</li> <li>Team Alignment: Ensure your team understands the tagging requirements</li> </ol>"},{"location":"default-tags/","title":"Provider Default Tags Support","text":"<p>Terratags integrates with AWS provider's <code>default_tags</code> feature. When you define default tags in your AWS provider configuration, Terratags will recognize these tags and consider them when validating resources.</p>"},{"location":"default-tags/#how-default-tags-work","title":"How Default Tags Work","text":"<ol> <li>Tags defined in the AWS provider's <code>default_tags</code> block are automatically applied to all taggable resources created by that provider</li> <li>Terratags tracks tag inheritance from provider default_tags to individual resources</li> <li>Resources only need to specify tags not covered by default_tags</li> <li>Default tags can be overridden at the resource level if needed</li> </ol>"},{"location":"default-tags/#example-with-default-tags","title":"Example with Default Tags","text":"<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Environment = \"dev\"\n      Owner       = \"team-a\"\n      Project     = \"demo\"\n    }\n  }\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  # Only need to specify Name tag, as other required tags come from default_tags\n  tags = {\n    Name = \"example-instance\"\n  }\n}\n</code></pre> <p>In this example, the AWS instance will have all four required tags: <code>Name</code> from the resource-level tags, and <code>Environment</code>, <code>Owner</code>, and <code>Project</code> from the provider's default_tags.</p>"},{"location":"default-tags/#benefits-of-using-default-tags","title":"Benefits of Using Default Tags","text":"<ol> <li>Consistency: Ensures consistent tagging across all resources</li> <li>Reduced Duplication: Eliminates the need to repeat the same tags on every resource</li> <li>Centralized Management: Makes it easier to update tags across all resources</li> <li>Reduced Errors: Minimizes the chance of missing required tags</li> </ol>"},{"location":"default-tags/#default-tags-limitations","title":"Default Tags Limitations","text":"<ol> <li>Provider Specific: Only works with providers that support default_tags (like AWS)</li> <li>Override Behavior: Resource-level tags override default tags with the same key</li> <li>Module Awareness: When using modules, be aware of how default tags propagate</li> </ol>"},{"location":"default-tags/#best-practices","title":"Best Practices","text":"<ol> <li>Use for Common Tags: Use default_tags for tags that should be consistent across all resources</li> <li>Resource-Specific Tags: Use resource-level tags for tags that are specific to individual resources</li> <li>Documentation: Document which tags are provided by default_tags to avoid confusion</li> <li>Validation: Still use Terratags to validate that all required tags are present</li> </ol>"},{"location":"example-standards/","title":"Standard Examples for Documentation","text":"<p>This document defines the canonical examples to be used consistently across all Terratags documentation.</p>"},{"location":"example-standards/#standard-examples-by-pattern-type","title":"Standard Examples by Pattern Type","text":""},{"location":"example-standards/#environment-values","title":"Environment Values","text":"<p>Pattern: <code>^(dev|test|staging|prod)$</code> Standard Examples: - <code>dev</code> (development) - <code>test</code> (testing) - <code>staging</code> (staging) - <code>prod</code> (production)</p>"},{"location":"example-standards/#project-codes","title":"Project Codes","text":"<p>Pattern: <code>^[A-Z]{2,4}-[0-9]{3,6}$</code> Standard Examples: - <code>WEB-123456</code> (web applications) - <code>DATA-567890</code> (data projects) - <code>SEC-123456</code> (security projects) - <code>INFRA-890123</code> (infrastructure) - <code>API-456789</code> (API projects)</p>"},{"location":"example-standards/#cost-centers","title":"Cost Centers","text":"<p>Pattern: <code>^CC-[0-9]{4}$</code> Standard Examples: - <code>CC-1234</code> (engineering) - <code>CC-5678</code> (operations) - <code>CC-9012</code> (security) - <code>CC-3456</code> (data)</p>"},{"location":"example-standards/#email-addresses","title":"Email Addresses","text":"<p>Pattern: <code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$</code> Standard Examples: - <code>devops@company.com</code> (DevOps team) - <code>team.lead@company.com</code> (Team lead) - <code>security@company.com</code> (Security team) - <code>data.team@company.com</code> (Data team)</p>"},{"location":"example-standards/#resource-names-no-whitespace","title":"Resource Names (No Whitespace)","text":"<p>Pattern: <code>^\\\\S+$</code> Standard Examples: - <code>web-server-01</code> (web server) - <code>data-bucket</code> (S3 bucket) - <code>main-vpc</code> (VPC) - <code>allow-http-sg</code> (security group)</p>"},{"location":"example-standards/#version-numbers","title":"Version Numbers","text":"<p>Pattern: <code>^v?[0-9]+\\\\.[0-9]+\\\\.[0-9]+$</code> Standard Examples: - <code>1.0.0</code> (without prefix) - <code>v2.1.3</code> (with prefix) - <code>10.15.2</code> (multi-digit)</p>"},{"location":"example-standards/#usage-guidelines","title":"Usage Guidelines","text":"<ol> <li>Always use these exact examples in documentation</li> <li>Don't create new examples without updating this standard</li> <li>Test all examples with actual patterns before documenting</li> <li>Update this file first when adding new pattern types</li> </ol>"},{"location":"example-standards/#validation","title":"Validation","text":"<p>All examples in this document have been tested with their corresponding patterns to ensure they work correctly.</p>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of how to use Terratags in various scenarios.</p>"},{"location":"examples/#validation-examples","title":"Validation Examples","text":""},{"location":"examples/#directory-validation-direct-resources","title":"Directory Validation (Direct Resources)","text":"<p>Validate resources defined directly in your Terraform files:</p> <pre><code># Basic validation\nterratags -config config.yaml -dir ./infra\n\n# With HTML report\nterratags -config config.yaml -dir ./infra -report report.html\n\n# With exemptions\nterratags -config config.yaml -dir ./infra -exemptions exemptions.yaml\n</code></pre>"},{"location":"examples/#plan-validation-all-resources-including-modules","title":"Plan Validation (All Resources Including Modules)","text":"<p>Validate all resources including those created by external modules:</p> <pre><code># Generate plan\nterraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\n\n# Validate all resources\nterratags -config config.yaml -plan plan.json\n\n# With HTML report\nterratags -config config.yaml -plan plan.json -report report.html\n</code></pre>"},{"location":"examples/#configuration-examples","title":"Configuration Examples","text":""},{"location":"examples/#basic-required-tags-configuration-yaml","title":"Basic Required Tags Configuration (YAML)","text":"<pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre>"},{"location":"examples/#pattern-validation-configuration-yaml","title":"Pattern Validation Configuration (YAML)","text":"<pre><code>required_tags:\n  Name:\n    pattern: \"^\\\\S+$\"  # No whitespace\n\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"  # Specific values only\n\n  Owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"  # Email format\n\n  Project:\n    pattern: \"^[A-Z]{2,4}-[0-9]{3,6}$\"  # Project code format\n\n  CostCenter:\n    pattern: \"^CC-[0-9]{4}$\"  # Cost center format\n</code></pre>"},{"location":"examples/#mixed-validation-configuration-yaml","title":"Mixed Validation Configuration (YAML)","text":"<pre><code>required_tags:\n  # Pattern validation for critical tags\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n\n  Owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n\n  # Simple validation for others\n  Name: {}\n  Project: {}\n  Team: {}\n</code></pre>"},{"location":"examples/#exemptions-configuration","title":"Exemptions Configuration","text":"<pre><code>exemptions:\n  - resource_type: aws_s3_bucket\n    resource_name: logs_bucket\n    exempt_tags: [Owner, Project]\n    reason: \"Legacy bucket used for system logs only\"\n\n  - resource_type: aws_dynamodb_table\n    resource_name: \"*\"\n    exempt_tags: [Environment]\n    reason: \"DynamoDB tables use environment from provider default_tags\"\n</code></pre>"},{"location":"examples/#terraform-examples","title":"Terraform Examples","text":""},{"location":"examples/#aws-provider-with-default-tags","title":"AWS Provider with Default Tags","text":"<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Environment = \"dev\"\n      Owner       = \"team-a\"\n      Project     = \"demo\"\n    }\n  }\n}\n</code></pre>"},{"location":"examples/#resource-with-tags","title":"Resource with Tags","text":"<pre><code>resource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  tags = {\n    Name = \"example-instance\"\n    Environment = \"production\"\n    Owner = \"team-b\"\n    Project = \"website\"\n  }\n}\n</code></pre>"},{"location":"examples/#resource-with-default-tags","title":"Resource with Default Tags","text":"<pre><code>resource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  # Only need to specify Name tag, as other required tags come from default_tags\n  tags = {\n    Name = \"example-instance\"\n  }\n}\n</code></pre>"},{"location":"examples/#module-with-tags","title":"Module with Tags","text":"<pre><code>module \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n  version = \"3.14.0\"\n\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"my-vpc\"\n    Environment = \"production\"\n    Owner = \"team-b\"\n    Project = \"website\"\n  }\n}\n</code></pre>"},{"location":"examples/#command-examples","title":"Command Examples","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<pre><code>terratags -config config.yaml -dir ./infra\n</code></pre>"},{"location":"examples/#generate-html-report","title":"Generate HTML Report","text":"<pre><code>terratags -config config.yaml -dir ./infra -report report.html\n</code></pre>"},{"location":"examples/#validate-terraform-plan","title":"Validate Terraform Plan","text":"<pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"examples/#show-auto-remediation-suggestions","title":"Show Auto-remediation Suggestions","text":"<pre><code>terratags -config config.yaml -dir ./infra -remediate\n</code></pre>"},{"location":"examples/#use-exemptions","title":"Use Exemptions","text":"<pre><code>terratags -config config.yaml -dir ./infra -exemptions exemptions.yaml\n</code></pre>"},{"location":"examples/#verbose-output","title":"Verbose Output","text":"<pre><code>terratags -config config.yaml -dir ./infra -verbose\n</code></pre>"},{"location":"examples/#pattern-validation-examples","title":"Pattern Validation Examples","text":"<pre><code># Test passing pattern validation\nterratags -config examples/config-patterns.yaml -dir examples/pattern_validation_passing\n\n# Test failing pattern validation (shows violations)\nterratags -config examples/config-patterns.yaml -dir examples/pattern_validation_failing\n\n# Generate report for pattern violations\nterratags -config examples/config-patterns.yaml -dir examples/pattern_validation_failing -report pattern-report.html\n</code></pre>"},{"location":"examples/#repository-examples","title":"Repository Examples","text":"<p>The repository includes comprehensive examples in the <code>examples/</code> directory:</p>"},{"location":"examples/#pattern-validation-examples_1","title":"Pattern Validation Examples","text":"<ul> <li><code>pattern_validation_passing/</code> - Terraform resources with tags that pass all pattern validation requirements</li> <li><code>pattern_validation_failing/</code> - Terraform resources with tags that fail pattern validation (demonstrates common mistakes)</li> </ul>"},{"location":"examples/#provider-examples","title":"Provider Examples","text":"<ul> <li><code>provider_default_tags/</code> - AWS provider default_tags integration</li> <li><code>awscc_tags/</code> - AWS Cloud Control provider tag format</li> <li><code>azurerm_tags/</code> - Azure Resource Manager provider</li> <li><code>azapi_tags/</code> - Azure API provider with default_tags</li> </ul>"},{"location":"examples/#resource-type-examples","title":"Resource Type Examples","text":"<ul> <li><code>resource_blocks/</code> - Individual resource validation</li> <li><code>module_blocks/</code> - Module-level tag validation</li> <li><code>mixed_blocks/</code> - Mixed resource and module validation</li> </ul>"},{"location":"examples/#configuration-examples_1","title":"Configuration Examples","text":"<ul> <li><code>config.yaml</code> - Simple format (legacy)</li> <li><code>config-patterns.yaml</code> - Advanced pattern validation</li> <li><code>config-mixed.yaml</code> - Mixed simple and pattern validation</li> </ul>"},{"location":"examples/#additional-resources","title":"Additional Resources","text":"<p>For more detailed examples and guidance, please check:</p> <ul> <li>Pattern Matching Guide - Comprehensive guide to regex pattern validation</li> <li>Sample HTML Reports - View examples of HTML reports generated by Terratags</li> <li>User Scenarios - Explore practical use cases and implementation strategies</li> </ul>"},{"location":"exemptions/","title":"Exemptions Configuration","text":"<p>Exemptions allow you to exclude specific resources or resource types from certain tag requirements. Create a YAML or JSON file with your exemptions.</p>"},{"location":"exemptions/#exemption-fields","title":"Exemption Fields","text":"<ul> <li><code>resource_type</code>: The AWS resource type (e.g., aws_s3_bucket, aws_instance)</li> <li><code>resource_name</code>: The name of the specific resource to exempt. Use \"*\" to exempt all resources of the specified type</li> <li><code>exempt_tags</code>: List of tags that are not required for this resource</li> <li><code>reason</code>: A description explaining why this exemption exists</li> </ul>"},{"location":"exemptions/#yaml-example","title":"YAML Example","text":"<pre><code>exemptions:\n  - resource_type: aws_s3_bucket\n    resource_name: logs_bucket\n    exempt_tags: [Owner, Project]\n    reason: \"Legacy bucket used for system logs only\"\n\n  - resource_type: aws_dynamodb_table\n    resource_name: \"*\"\n    exempt_tags: [Environment]\n    reason: \"DynamoDB tables use environment from provider default_tags\"\n</code></pre>"},{"location":"exemptions/#json-example","title":"JSON Example","text":"<pre><code>{\n  \"exemptions\": [\n    {\n      \"resource_type\": \"aws_s3_bucket\",\n      \"resource_name\": \"logs_bucket\",\n      \"exempt_tags\": [\"Owner\", \"Project\"],\n      \"reason\": \"Legacy bucket used for system logs only\"\n    },\n    {\n      \"resource_type\": \"aws_dynamodb_table\",\n      \"resource_name\": \"*\",\n      \"exempt_tags\": [\"Environment\"],\n      \"reason\": \"DynamoDB tables use environment from provider default_tags\"\n    }\n  ]\n}\n</code></pre>"},{"location":"exemptions/#exemption-reporting","title":"Exemption Reporting","text":"<p>Exemptions are now tracked and reported in the HTML compliance reports. When a resource is exempt from tagging requirements:</p> <ol> <li>The resource is highlighted with a distinct color in the report</li> <li>The exemption reason is displayed with the resource details</li> <li>Exempt tags are clearly marked in the tag status table</li> <li>Exempt resources are counted separately in the compliance summary statistics</li> </ol> <p>This provides transparency into which resources have exemptions and why, making it easier to track and manage exemptions over time.</p>"},{"location":"exemptions/#example-exemption-in-reports","title":"Example Exemption in Reports","text":"<p>In the HTML reports, exempt resources are displayed with:</p> <ul> <li>An \"Exempt\" status label</li> <li>The specific reason for the exemption</li> <li>Tags marked as \"Exempt\" rather than \"Missing\"</li> <li>A different background color to distinguish them from compliant and non-compliant resources</li> </ul>"},{"location":"exemptions/#when-to-use-exemptions","title":"When to Use Exemptions","text":"<p>Exemptions are useful in several scenarios:</p> <ol> <li>Legacy Resources: Older resources that cannot be easily updated</li> <li>Special Purpose Resources: Resources with a specific purpose that don't fit the standard tagging model</li> <li>Default Tag Inheritance: Resources that inherit tags from other sources</li> </ol>"},{"location":"exemptions/#best-practices-for-exemptions","title":"Best Practices for Exemptions","text":"<ol> <li>Document Reasons: Always include a clear reason for each exemption</li> <li>Regular Review: Periodically review exemptions to see if they're still necessary</li> <li>Minimize Use: Use exemptions sparingly to maintain consistent tagging</li> <li>Specific Scope: Make exemptions as specific as possible (prefer specific resource names over wildcards)</li> <li>Version Control: Keep your exemptions file in version control</li> </ol>"},{"location":"google-support/","title":"Google Cloud Provider Support","text":"<p>Terratags supports the Google Cloud provider for validating labels on GCP resources.</p>"},{"location":"google-support/#overview","title":"Overview","text":"<p>Google Cloud Platform uses labels instead of tags for resource metadata. Terratags treats labels the same way as tags for validation purposes, ensuring consistent tag/label compliance across AWS, Azure, and Google Cloud.</p>"},{"location":"google-support/#supported-features","title":"Supported Features","text":"<ul> <li>\u2705 Label validation on 244+ Google Cloud resources</li> <li>\u2705 Provider-level <code>default_labels</code> support</li> <li>\u2705 Pattern matching for label values</li> <li>\u2705 HTML report generation</li> <li>\u2705 Terraform plan validation</li> <li>\u2705 Module resource validation</li> </ul>"},{"location":"google-support/#label-format","title":"Label Format","text":"<p>Google Cloud resources use a map of key/value pairs for labels:</p> <pre><code>resource \"google_compute_instance\" \"example\" {\n  name         = \"example-instance\"\n  machine_type = \"e2-medium\"\n  zone         = \"us-central1-a\"\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n  }\n\n  labels = {\n    environment = \"production\"\n    project     = \"terratags\"\n    name        = \"example-instance\"\n  }\n}\n</code></pre>"},{"location":"google-support/#provider-default-labels","title":"Provider Default Labels","text":"<p>The Google provider supports <code>default_labels</code> at the provider level, similar to AWS <code>default_tags</code>:</p> <pre><code>provider \"google\" {\n  project = \"my-project-id\"\n  region  = \"us-central1\"\n\n  default_labels = {\n    environment = \"production\"\n    owner       = \"team-a\"\n  }\n}\n\nresource \"google_storage_bucket\" \"example\" {\n  name     = \"example-bucket\"\n  location = \"US\"\n\n  labels = {\n    name    = \"example-bucket\"\n    project = \"demo\"\n  }\n}\n</code></pre> <p>In this example, the bucket will have all four labels: - <code>name</code> and <code>project</code> from resource-level labels - <code>environment</code> and <code>owner</code> from provider's <code>default_labels</code></p>"},{"location":"google-support/#label-inheritance","title":"Label Inheritance","text":"<p>Terratags tracks label sources and inheritance:</p> <ol> <li>Provider default_labels: Applied to all resources created by the provider</li> <li>Resource labels: Specified directly on the resource</li> <li>Module labels: Inherited from module blocks</li> </ol> <p>Resources only need to specify labels not covered by <code>default_labels</code>.</p>"},{"location":"google-support/#validation-example","title":"Validation Example","text":""},{"location":"google-support/#configuration-file","title":"Configuration File","text":"<pre><code>required_tags:\n  name: {}\n  environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n  owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n  project: {}\n</code></pre>"},{"location":"google-support/#terraform-file","title":"Terraform File","text":"<pre><code>provider \"google\" {\n  project = \"my-project-id\"\n  region  = \"us-central1\"\n\n  default_labels = {\n    environment = \"prod\"\n    owner       = \"devops@company.com\"\n  }\n}\n\n# Compliant - has all required labels\nresource \"google_compute_disk\" \"compliant\" {\n  name = \"test-disk\"\n  type = \"pd-ssd\"\n  zone = \"us-central1-a\"\n  size = 10\n\n  labels = {\n    name    = \"test-disk\"\n    project = \"demo\"\n  }\n}\n\n# Non-compliant - missing project label\nresource \"google_storage_bucket\" \"non_compliant\" {\n  name     = \"my-bucket\"\n  location = \"US\"\n\n  labels = {\n    name = \"my-bucket\"\n  }\n}\n</code></pre>"},{"location":"google-support/#validation-output","title":"Validation Output","text":"<pre><code>$ terratags -config config.yaml -dir ./gcp-infra\n\nTag validation issues found:\nResource google_storage_bucket 'non_compliant' is missing required tags: project\n\nSummary: 1/2 resources compliant (50.0%)\n</code></pre>"},{"location":"google-support/#supported-resources","title":"Supported Resources","text":"<p>Terratags supports 244+ Google Cloud resources that have labels support, including:</p> <ul> <li>Compute Engine (instances, disks, images)</li> <li>Cloud Storage (buckets)</li> <li>BigQuery (datasets, tables)</li> <li>Cloud SQL (instances)</li> <li>GKE (clusters, node pools)</li> <li>Cloud Functions</li> <li>Cloud Run</li> <li>And many more...</li> </ul> <p>For the complete list, see the Supported Providers documentation.</p>"},{"location":"google-support/#key-differences-from-awsazure","title":"Key Differences from AWS/Azure","text":"Feature AWS Azure Google Cloud Terminology tags tags labels Provider defaults default_tags default_tags (azapi only) default_labels Format Map Map Map Validation \u2705 \u2705 \u2705"},{"location":"google-support/#usage-examples","title":"Usage Examples","text":""},{"location":"google-support/#basic-validation","title":"Basic Validation","text":"<pre><code>terratags -config config.yaml -dir ./gcp-infra\n</code></pre>"},{"location":"google-support/#generate-report","title":"Generate Report","text":"<pre><code>terratags -config config.yaml -dir ./gcp-infra -report gcp-report.html\n</code></pre>"},{"location":"google-support/#validate-terraform-plan","title":"Validate Terraform Plan","text":"<pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"google-support/#with-exemptions","title":"With Exemptions","text":"<pre><code>terratags -config config.yaml -dir ./gcp-infra -exemptions exemptions.yaml\n</code></pre>"},{"location":"google-support/#best-practices","title":"Best Practices","text":"<ol> <li>Use default_labels: Define common labels at the provider level</li> <li>Pattern validation: Use regex patterns to enforce label value formats</li> <li>Consistent naming: Use the same label keys across AWS, Azure, and GCP</li> <li>Documentation: Document your labeling strategy</li> <li>Automation: Integrate terratags into CI/CD pipelines</li> </ol>"},{"location":"google-support/#limitations","title":"Limitations","text":"<ul> <li>Provider aliases are not tested and behavior cannot be guaranteed</li> <li>Labels must follow GCP label requirements</li> </ul>"},{"location":"google-support/#see-also","title":"See Also","text":"<ul> <li>Configuration - Configure required labels</li> <li>Pattern Matching - Validate label values with regex</li> <li>Default Tags - Learn about default_labels inheritance</li> <li>Examples - More usage examples</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Terratags can be installed in multiple ways. You don't need to have Go installed to use Terratags.</p>"},{"location":"installation/#binary-installation","title":"Binary Installation","text":"<p>The easiest way to install Terratags is to download a pre-built binary from the GitHub Releases page:</p> <ol> <li>Download the appropriate binary for your operating system (Windows, macOS, or Linux)</li> <li>Extract the archive if necessary</li> <li>Move the binary to a directory in your PATH</li> </ol>"},{"location":"installation/#linuxmacos","title":"Linux/macOS","text":"<pre><code># Example for Linux amd64\ncurl -L https://github.com/terratags/terratags/releases/latest/download/terratags_linux_amd64.tar.gz | tar xz\nsudo mv terratags /usr/local/bin/\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<p>Download the appropriate .zip file from the releases page, extract it, and add the location to your PATH.</p>"},{"location":"installation/#homebrew-installation-macoslinux","title":"Homebrew Installation (macOS/Linux)","text":"<p>If you use Homebrew, you can install Terratags with:</p> <pre><code>brew install terratags/tap/terratags\n</code></pre>"},{"location":"installation/#go-installation-alternative","title":"Go Installation (Alternative)","text":"<p>If you have Go installed, you can also install Terratags using Go's package manager:</p> <pre><code>go install github.com/terratags/terratags@latest\n</code></pre> <p>This will download and install the latest version of Terratags to your Go bin directory.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Terraform (for analyzing Terraform configurations)</li> </ul>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, you can verify that Terratags is installed correctly by running:</p> <pre><code>terratags -version\n</code></pre> <p>This should display the current version of Terratags.</p>"},{"location":"installation/#building-from-source","title":"Building from Source","text":"<p>If you prefer to build from source:</p> <pre><code>git clone https://github.com/terratags/terratags.git\ncd terratags\ngo build\n</code></pre> <p>This will create a <code>terratags</code> binary in your current directory.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, you'll need to:</p> <ol> <li>Create a configuration file that defines your required tags</li> <li>Run Terratags against your Terraform code</li> <li>Review the results and fix any non-compliant resources</li> </ol>"},{"location":"logging/","title":"Logging","text":"<p>Terratags provides a flexible logging system that allows you to control the verbosity and detail of output during execution.</p>"},{"location":"logging/#log-levels","title":"Log Levels","text":"<p>Terratags supports the following log levels, in order of increasing severity:</p> <ul> <li><code>DEBUG</code>: Detailed information, typically useful only for diagnosing problems</li> <li><code>INFO</code>: Confirmation that things are working as expected</li> <li><code>WARN</code>: Indication that something unexpected happened, but the process can continue</li> <li><code>ERROR</code>: Due to a more serious problem, the process couldn't perform a specific function</li> </ul>"},{"location":"logging/#setting-the-log-level","title":"Setting the Log Level","text":"<p>You can set the log level using the <code>-log-level</code> or <code>-l</code> command-line flag:</p> <pre><code>terratags -config config.yaml -log-level DEBUG\n</code></pre> <p>Or using the short form:</p> <pre><code>terratags -c config.yaml -l DEBUG\n</code></pre> <p>The default log level is <code>ERROR</code> if not specified.</p>"},{"location":"logging/#log-output-format","title":"Log Output Format","text":"<p>Here are examples of how logs appear at different levels:</p>"},{"location":"logging/#debug-level-output","title":"DEBUG Level Output","text":"<pre><code>DEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tags attribute in awscc_s3_bucket name\nDEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tag key: Name with value: test\n</code></pre>"},{"location":"logging/#info-level-output","title":"INFO Level Output","text":"<pre><code>INFO    2025-05-18T20:33:48.265-0400    Loaded configuration with 4 required tags\nINFO    2025-05-18T20:33:48.266-0400    Validating Terraform directory: ../awscc_examples/\nINFO    2025-05-18T20:33:48.267-0400    Found 1 Terraform files to analyze\nINFO    2025-05-18T20:33:48.267-0400    Analyzing file: ../awscc_examples/main.tf\n</code></pre>"},{"location":"logging/#warn-level-output","title":"WARN Level Output","text":"<pre><code>WARN    2025-05-18T20:33:48.269-0400    Warning: Some blocks in main.tf couldn't be parsed, but we'll continue with what we can parse\nWARN    2025-05-18T20:33:48.269-0400    Error parsing provider blocks in main.tf: invalid syntax\n</code></pre>"},{"location":"logging/#error-level-output","title":"ERROR Level Output","text":"<pre><code>ERROR   2025-05-18T20:33:48.270-0400    Failed to parse configuration file: invalid syntax at line 15\n</code></pre>"},{"location":"logging/#logging-in-cicd-environments","title":"Logging in CI/CD Environments","text":"<p>When using Terratags in CI/CD pipelines, consider the following:</p> <ol> <li>Use the default ERROR level for normal operation to keep logs clean</li> <li>Use the INFO level for more detailed output when debugging pipeline issues</li> <li>Consider using the <code>-report</code> option to generate an HTML report for better visualization of results</li> <li>Redirect logs to a file for later analysis if needed</li> </ol> <p>Example GitHub Actions workflow:</p> <pre><code>- name: Validate Tags\n  run: |\n    terratags -config config.yaml -dir ./infra -log-level INFO -report report.html\n  continue-on-error: true\n\n- name: Upload Report\n  uses: actions/upload-artifact@v3\n  with:\n    name: tag-validation-report\n    path: report.html\n</code></pre>"},{"location":"logging/#technical-implementation","title":"Technical Implementation","text":"<p>Terratags uses a logging implementation based on Zap.</p>"},{"location":"module-validation/","title":"Module Resource Validation","text":"<p>Terratags can validate resources created by external modules (from Terraform Registry, Git repositories, etc.) by analyzing Terraform plan output. This provides comprehensive tag compliance checking across your entire infrastructure.</p>"},{"location":"module-validation/#overview","title":"Overview","text":"<p>When using external modules in Terraform, the actual resources created by those modules are not visible during static analysis of your Terraform files. Terratags solves this by analyzing the Terraform plan output, which contains the expanded resource tree including all module-created resources.</p>"},{"location":"module-validation/#how-it-works","title":"How It Works","text":""},{"location":"module-validation/#static-analysis-limitation","title":"Static Analysis Limitation","text":"<p>When analyzing Terraform files directly (<code>-dir</code> flag), terratags can only see: - Direct resource blocks in your <code>.tf</code> files - Module calls and their input variables/tags - Provider configurations</p> <p>It cannot see: - Resources created inside external modules - Conditional resources based on module logic - Dynamic resource creation patterns</p>"},{"location":"module-validation/#plan-based-analysis","title":"Plan-Based Analysis","text":"<p>When analyzing Terraform plan JSON (<code>-plan</code> flag), terratags can see: - All direct resources from your <code>.tf</code> files - All resources that will be created by external modules - The complete resource dependency tree - Actual tag values after variable resolution</p>"},{"location":"module-validation/#tag-inheritance","title":"Tag Inheritance","text":"<p>Tags passed to module calls are automatically inherited by resources created within those modules:</p> <ol> <li>Module Call Tags: Tags defined in the module block</li> <li>Resource Tags: Tags defined directly on resources within modules</li> <li>Provider Default Tags: Tags from provider <code>default_tags</code> configuration</li> <li>Inheritance Priority: Resource tags &gt; Module tags &gt; Provider default tags</li> </ol>"},{"location":"module-validation/#validation-modes","title":"Validation Modes","text":"Mode Command Scope Use Case Directory <code>terratags -config config.yaml -dir ./infra</code> Direct resources + module calls Quick validation, CI/CD for file changes Plan <code>terratags -config config.yaml -plan plan.json</code> All resources (direct + module-created) Comprehensive validation, pre-deployment"},{"location":"module-validation/#examples","title":"Examples","text":""},{"location":"module-validation/#module-validation-scenario","title":"Module Validation Scenario","text":"<p>Consider this Terraform configuration:</p> <pre><code># main.tf\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n  version = \"3.14.0\"\n\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"us-west-2a\", \"us-west-2b\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\"]\n\n  tags = {\n    Environment = \"production\"\n    Owner       = \"platform-team\"\n    Project     = \"infrastructure\"\n    # All required tags present for module call\n  }\n}\n\nresource \"aws_s3_bucket\" \"app_data\" {\n  bucket = \"my-app-data\"\n\n  tags = {\n    Environment = \"production\"\n    Owner       = \"app-team\"\n    # Missing Project tag - will be flagged\n  }\n}\n</code></pre>"},{"location":"module-validation/#directory-validation","title":"Directory Validation","text":"<pre><code>terratags -config config.yaml -dir .\n</code></pre> <p>Results: - \u2705 Module <code>vpc</code> call has all required tags - \u274c Resource <code>aws_s3_bucket.app_data</code> missing <code>Project</code> tag - \u2753 Unknown: What about the VPC, subnets, route tables, etc. created by the module?</p>"},{"location":"module-validation/#plan-validation","title":"Plan Validation","text":"<pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre> <p>Results: - \u2705 Module <code>vpc</code> call has all required tags - \u274c Resource <code>aws_s3_bucket.app_data</code> missing <code>Project</code> tag - \u2705 <code>module.vpc.aws_vpc.this[0]</code> inherits tags from module call - \u2705 <code>module.vpc.aws_subnet.private[0]</code> inherits tags from module call - \u2705 <code>module.vpc.aws_subnet.private[1]</code> inherits tags from module call - \u2705 <code>module.vpc.aws_subnet.public[0]</code> inherits tags from module call - \u2705 <code>module.vpc.aws_subnet.public[1]</code> inherits tags from module call - \u2705 <code>module.vpc.aws_route_table.private[0]</code> inherits tags from module call - ... and so on for all module-created resources</p>"},{"location":"module-validation/#configuration","title":"Configuration","text":"<p>Module validation works with all existing terratags configuration options:</p>"},{"location":"module-validation/#required-tags","title":"Required Tags","text":"<pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre>"},{"location":"module-validation/#pattern-validation","title":"Pattern Validation","text":"<pre><code>required_tags:\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n  Owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n  Project: {}\n  Name: {}\n</code></pre>"},{"location":"module-validation/#exemptions","title":"Exemptions","text":"<pre><code>exemptions:\n  - resource_type: aws_vpc\n    resource_name: \"*\"\n    exempt_tags: [Name]\n    reason: \"VPC names are managed by module\"\n\n  - resource_type: aws_subnet\n    resource_name: \"*\"\n    exempt_tags: [Name]\n    reason: \"Subnet names are auto-generated by module\"\n</code></pre>"},{"location":"module-validation/#reporting","title":"Reporting","text":""},{"location":"module-validation/#console-output","title":"Console Output","text":"<p>Plan validation provides detailed output distinguishing between direct and module resources:</p> <pre><code>INFO    Found 1 direct resources and 12 module resources\nINFO    Direct resources: 0/1 compliant (0.0%)\nINFO    Module resources: 12/12 compliant\nINFO    Overall: 12/13 compliant (92.3%)\n\nResource aws_s3_bucket 'app_data' is missing required tags: Project\n</code></pre>"},{"location":"module-validation/#html-reports","title":"HTML Reports","text":"<p>HTML reports include separate sections for: - Direct Resources: Resources defined in your <code>.tf</code> files - Module Resources: Resources created by external modules</p> <p>Module resources show additional information: - Module path (e.g., <code>module.vpc</code>) - Module source (e.g., <code>terraform-aws-modules/vpc/aws@3.14.0</code>) - Tag inheritance details</p>"},{"location":"module-validation/#best-practices","title":"Best Practices","text":""},{"location":"module-validation/#1-use-plan-validation-for-production","title":"1. Use Plan Validation for Production","text":"<p>For production deployments, always use plan validation to ensure comprehensive coverage:</p> <pre><code># Production deployment pipeline\nterraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"module-validation/#2-use-directory-validation-for-development","title":"2. Use Directory Validation for Development","text":"<p>For quick feedback during development, directory validation is sufficient:</p> <pre><code># Development workflow\nterratags -config config.yaml -dir .\n</code></pre>"},{"location":"module-validation/#3-configure-module-specific-exemptions","title":"3. Configure Module-Specific Exemptions","text":"<p>Many modules auto-generate resource names or have specific tagging patterns:</p> <pre><code>exemptions:\n  # VPC module resources often have auto-generated names\n  - resource_type: aws_vpc\n    resource_name: \"*\"\n    exempt_tags: [Name]\n    reason: \"VPC names managed by terraform-aws-modules/vpc\"\n\n  # Security group rules don't typically need all tags\n  - resource_type: aws_security_group_rule\n    resource_name: \"*\"\n    exempt_tags: [Name, Project]\n    reason: \"Security group rules inherit context from parent\"\n</code></pre>"},{"location":"module-validation/#4-standardize-module-tags","title":"4. Standardize Module Tags","text":"<p>Ensure consistent tagging across modules by standardizing tag inputs:</p> <pre><code># Standard module tags variable\nvariable \"common_tags\" {\n  description = \"Common tags to apply to all resources\"\n  type        = map(string)\n  default = {\n    Environment = \"production\"\n    Owner       = \"platform-team\"\n    Project     = \"infrastructure\"\n    ManagedBy   = \"terraform\"\n  }\n}\n\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  # Module-specific configuration\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  # Apply standard tags\n  tags = var.common_tags\n}\n\nmodule \"rds\" {\n  source = \"terraform-aws-modules/rds/aws\"\n\n  # Module-specific configuration\n  identifier = \"my-database\"\n\n  # Apply standard tags\n  tags = var.common_tags\n}\n</code></pre>"},{"location":"module-validation/#limitations","title":"Limitations","text":""},{"location":"module-validation/#1-plan-generation-required","title":"1. Plan Generation Required","text":"<p>Module validation requires generating a Terraform plan, which means: - AWS/Azure credentials must be available - Terraform must be able to connect to providers - Plan generation time adds to validation time</p>"},{"location":"module-validation/#2-module-source-access","title":"2. Module Source Access","text":"<p>For private modules, ensure the validation environment has access: - Private Git repositories require SSH keys or tokens - Private Terraform registries require authentication - Network access to module sources</p>"},{"location":"module-validation/#3-dynamic-module-behavior","title":"3. Dynamic Module Behavior","text":"<p>Some advanced module patterns may not be fully captured: - Modules that create resources based on external data sources - Modules with complex conditional logic - Modules that use provider aliases extensively</p>"},{"location":"module-validation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"module-validation/#common-issues","title":"Common Issues","text":"<p>Issue: Module resources not appearing in validation <pre><code>Found 1 direct resources and 0 module resources\n</code></pre></p> <p>Solution: Ensure the plan includes module resources: <pre><code># Check plan contains module resources\nterraform show -json tfplan | jq '.resource_changes[] | select(.module_address != null)'\n</code></pre></p> <p>Issue: Tag inheritance not working <pre><code>Module resource missing tags that were passed to module call\n</code></pre></p> <p>Solution: Verify module call tags are being loaded: <pre><code># Run with verbose logging\nterratags -config config.yaml -plan plan.json -verbose\n</code></pre></p> <p>Issue: Module source showing as \"unknown\" <pre><code>Module: module.vpc (unknown)\n</code></pre></p> <p>Solution: Ensure plan includes configuration section: <pre><code># Generate plan with configuration\nterraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\n# Check configuration section exists\njq '.configuration.root_module.module_calls' plan.json\n</code></pre></p>"},{"location":"module-validation/#integration-examples","title":"Integration Examples","text":""},{"location":"module-validation/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Validate All Resources\n\non:\n  pull_request:\n    paths: ['**.tf']\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}\n\n      - name: Terraform Init\n        run: terraform init\n\n      - name: Generate Plan\n        run: |\n          terraform plan -out=tfplan\n          terraform show -json tfplan &gt; plan.json\n\n      - name: Validate Tags\n        run: terratags -config .terratags.yaml -plan plan.json -report report.html\n\n      - name: Upload Report\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: tag-validation-report\n          path: report.html\n</code></pre>"},{"location":"module-validation/#gitlab-ci","title":"GitLab CI","text":"<pre><code>validate-tags:\n  stage: validate\n  image: hashicorp/terraform:latest\n  before_script:\n    - apk add --no-cache go\n    - go install github.com/terratags/terratags@latest\n  script:\n    - terraform init\n    - terraform plan -out=tfplan\n    - terraform show -json tfplan &gt; plan.json\n    - terratags -config .terratags.yaml -plan plan.json\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n    paths:\n      - plan.json\n      - report.html\n</code></pre> <p>This comprehensive module validation capability ensures that your tag compliance policies are enforced across your entire Terraform-managed infrastructure, not just the resources you define directly.</p>"},{"location":"pattern-matching/","title":"Pattern Matching Guide","text":"<p>This guide provides comprehensive information about using pattern matching in Terratags to validate tag values with regular expressions.</p>"},{"location":"pattern-matching/#overview","title":"Overview","text":"<p>Pattern matching allows you to enforce specific formats, naming conventions, and business rules for your tag values using regular expressions. This goes beyond simple presence validation to ensure tag values meet your organization's standards.</p>"},{"location":"pattern-matching/#basic-concepts","title":"Basic Concepts","text":""},{"location":"pattern-matching/#what-is-pattern-matching","title":"What is Pattern Matching?","text":"<p>Pattern matching uses regular expressions (regex) to validate that tag values conform to specific formats. For example:</p> <ul> <li>Ensure environment tags only contain approved values (<code>dev</code>, <code>test</code>, <code>prod</code>)</li> <li>Validate email addresses for ownership tags</li> <li>Enforce project code formats (<code>ABC-123</code>)</li> <li>Prevent whitespace in resource names</li> </ul>"},{"location":"pattern-matching/#when-to-use-pattern-matching","title":"When to Use Pattern Matching","text":"<p>Use pattern matching when you need to:</p> <ul> <li>Standardize Values: Ensure consistent naming across resources</li> <li>Enforce Business Rules: Implement organizational policies</li> <li>Prevent Errors: Catch common mistakes early</li> <li>Improve Compliance: Meet regulatory or audit requirements</li> <li>Maintain Quality: Ensure clean, consistent infrastructure</li> </ul>"},{"location":"pattern-matching/#configuration-formats","title":"Configuration Formats","text":""},{"location":"pattern-matching/#simple-format-no-patterns","title":"Simple Format (No Patterns)","text":"<p>Basic presence validation without value checking:</p> <pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n</code></pre>"},{"location":"pattern-matching/#pattern-format","title":"Pattern Format","text":"<p>Advanced validation with regex patterns:</p> <pre><code>required_tags:\n  Name:\n    pattern: \"^[a-zA-Z0-9-]+$\"\n\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n\n  Owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n</code></pre>"},{"location":"pattern-matching/#mixed-format","title":"Mixed Format","text":"<p>Combine both approaches:</p> <pre><code>required_tags:\n  # Pattern validation\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n\n  # Simple validation\n  Team: {}\n  Description: {}\n</code></pre>"},{"location":"pattern-matching/#common-patterns-library","title":"Common Patterns Library","text":""},{"location":"pattern-matching/#environment-tags","title":"Environment Tags","text":"<p>Restrict to approved environment names:</p> <pre><code>Environment:\n  pattern: \"^(dev|test|staging|prod)$\"\n</code></pre> <p>Examples: - \u2705 Matches: <code>dev</code>, <code>test</code>, <code>staging</code>, <code>prod</code> - \u274c Rejects: <code>development</code>, <code>production</code>, <code>DEV</code>, <code>Test</code></p>"},{"location":"pattern-matching/#email-addresses","title":"Email Addresses","text":"<p>Validate email format for ownership:</p> <pre><code>Owner:\n  pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n</code></pre> <p>Examples: - \u2705 Matches: <code>devops@company.com</code>, <code>team.lead@company.com</code> - \u274c Rejects: <code>username</code>, <code>user@domain</code>, <code>@company.com</code></p>"},{"location":"pattern-matching/#project-codes","title":"Project Codes","text":"<p>Enforce structured project identifiers:</p> <pre><code>Project:\n  pattern: \"^[A-Z]{2,4}-[0-9]{3,6}$\"\n</code></pre> <p>Examples: - \u2705 Matches: <code>WEB-123456</code>, <code>DATA-567890</code>, <code>INFRA-890123</code> - \u274c Rejects: <code>web-123</code>, <code>PROJECT</code>, <code>ABC-12</code></p>"},{"location":"pattern-matching/#cost-centers","title":"Cost Centers","text":"<p>Standardize cost center format:</p> <pre><code>CostCenter:\n  pattern: \"^CC-[0-9]{4}$\"\n</code></pre> <p>Examples: - \u2705 Matches: <code>CC-1234</code>, <code>CC-5678</code>, <code>CC-9012</code> - \u274c Rejects: <code>CC123</code>, <code>CC-12345</code>, <code>cc-1234</code></p>"},{"location":"pattern-matching/#resource-names","title":"Resource Names","text":"<p>Prevent whitespace and special characters:</p> <pre><code>Name:\n  pattern: \"^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$\"\n</code></pre> <p>Examples: - \u2705 Matches: <code>web-server-01</code>, <code>data-bucket</code>, <code>main-vpc</code> - \u274c Rejects: <code>web server</code>, <code>-web-server</code>, <code>api-gateway-</code></p>"},{"location":"pattern-matching/#version-numbers","title":"Version Numbers","text":"<p>Validate semantic versioning:</p> <pre><code>Version:\n  pattern: \"^v?[0-9]+\\\\.[0-9]+\\\\.[0-9]+$\"\n</code></pre> <p>Examples: - \u2705 Matches: <code>1.0.0</code>, <code>v2.1.3</code>, <code>10.15.2</code> - \u274c Rejects: <code>1.0</code>, <code>v1</code>, <code>1.0.0-beta</code></p>"},{"location":"pattern-matching/#ip-addresses","title":"IP Addresses","text":"<p>Validate IPv4 addresses:</p> <pre><code>IPAddress:\n  pattern: \"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}$\"\n</code></pre> <p>Examples: - \u2705 <code>192.168.1.1</code>, <code>10.0.0.1</code>, <code>172.16.0.1</code> - \u274c <code>192.168.1</code>, <code>256.1.1.1</code>, <code>not-an-ip</code></p>"},{"location":"pattern-matching/#aws-resource-arns","title":"AWS Resource ARNs","text":"<p>Validate ARN format:</p> <pre><code>SourceARN:\n  pattern: \"^arn:aws:[a-zA-Z0-9-]+:[a-zA-Z0-9-]*:[0-9]{12}:.+$\"\n</code></pre> <p>Examples: - \u2705 <code>arn:aws:s3:::my-bucket</code>, <code>arn:aws:iam::123456789012:role/MyRole</code> - \u274c <code>arn:aws:s3</code>, <code>not-an-arn</code></p>"},{"location":"pattern-matching/#advanced-pattern-techniques","title":"Advanced Pattern Techniques","text":""},{"location":"pattern-matching/#case-insensitive-matching","title":"Case-Insensitive Matching","text":"<p>Use the <code>--ignore-case</code> flag for case-insensitive tag name matching (patterns themselves remain case-sensitive):</p> <pre><code>terratags -config config.yaml -dir ./terraform --ignore-case\n</code></pre>"},{"location":"pattern-matching/#optional-components","title":"Optional Components","text":"<p>Use <code>?</code> for optional parts:</p> <pre><code>Version:\n  pattern: \"^v?[0-9]+\\\\.[0-9]+\\\\.[0-9]+(-[a-zA-Z0-9]+)?$\"\n</code></pre> <p>Matches: <code>1.0.0</code>, <code>v1.0.0</code>, <code>1.0.0-beta</code>, <code>v2.1.3-alpha</code></p>"},{"location":"pattern-matching/#character-classes","title":"Character Classes","text":"<p>Use character classes for flexibility:</p> <pre><code>Name:\n  pattern: \"^[a-zA-Z][a-zA-Z0-9_-]{2,30}[a-zA-Z0-9]$\"\n</code></pre> <ul> <li>Must start with a letter</li> <li>Can contain letters, numbers, underscores, hyphens</li> <li>Must end with letter or number</li> <li>Length between 4-32 characters</li> </ul>"},{"location":"pattern-matching/#alternation","title":"Alternation","text":"<p>Use <code>|</code> for multiple valid formats:</p> <pre><code>Environment:\n  pattern: \"^(dev|development|test|testing|stage|staging|prod|production)$\"\n</code></pre>"},{"location":"pattern-matching/#quantifiers","title":"Quantifiers","text":"<p>Control repetition with quantifiers:</p> <ul> <li><code>*</code> - Zero or more</li> <li><code>+</code> - One or more  </li> <li><code>?</code> - Zero or one</li> <li><code>{n}</code> - Exactly n times</li> <li><code>{n,}</code> - n or more times</li> <li><code>{n,m}</code> - Between n and m times</li> </ul> <pre><code>Project:\n  pattern: \"^[A-Z]{2,4}-[0-9]{3,6}$\"  # 2-4 letters, 3-6 digits\n</code></pre>"},{"location":"pattern-matching/#error-handling-and-debugging","title":"Error Handling and Debugging","text":""},{"location":"pattern-matching/#understanding-error-messages","title":"Understanding Error Messages","text":"<p>When validation fails, Terratags provides detailed error messages:</p> <pre><code>Resource aws_instance 'web_server' has tag pattern violations:\n  - Tag 'Environment': value 'Production' does not match required pattern '^(dev|test|staging|prod)$'\n  - Tag 'Owner': value 'DevOps Team' does not match required pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$'\n</code></pre>"},{"location":"pattern-matching/#common-pattern-errors","title":"Common Pattern Errors","text":"<ol> <li>Escaping Issues: Remember to escape backslashes in YAML (<code>\\\\</code> instead of <code>\\</code>)</li> <li>Anchoring: Use <code>^</code> and <code>$</code> to match the entire string</li> <li>Case Sensitivity: Patterns are case-sensitive by default</li> <li>Special Characters: Escape regex special characters when matching literally</li> </ol>"},{"location":"pattern-matching/#testing-patterns","title":"Testing Patterns","text":"<p>Test your patterns before deployment:</p> <pre><code># Test with passing examples\nterratags -config config.yaml -dir examples/pattern_validation_passing\n\n# Test with failing examples\nterratags -config config.yaml -dir examples/pattern_validation_failing\n\n# Generate detailed report\nterratags -config config.yaml -dir examples/failing -report debug-report.html\n</code></pre>"},{"location":"pattern-matching/#best-practices","title":"Best Practices","text":""},{"location":"pattern-matching/#1-start-simple","title":"1. Start Simple","text":"<p>Begin with basic patterns and add complexity gradually:</p> <pre><code># Start with this\nEnvironment:\n  pattern: \"^(dev|prod)$\"\n\n# Expand as needed\nEnvironment:\n  pattern: \"^(dev|development|test|testing|staging|prod|production)$\"\n</code></pre>"},{"location":"pattern-matching/#2-use-meaningful-patterns","title":"2. Use Meaningful Patterns","text":"<p>Make patterns reflect real business requirements:</p> <pre><code># Good: Reflects actual project structure\nProject:\n  pattern: \"^[A-Z]{2,4}-[0-9]{3,6}$\"\n\n# Bad: Too restrictive without business justification\nProject:\n  pattern: \"^PROJECT-[0-9]{3}$\"\n</code></pre>"},{"location":"pattern-matching/#3-document-your-patterns","title":"3. Document Your Patterns","text":"<p>Add comments explaining pattern requirements:</p> <pre><code>required_tags:\n  # Project code format: 2-4 uppercase letters, dash, 3-6 digits\n  # Examples: WEB-123456, DATA-567890, INFRA-890123\n  Project:\n    pattern: \"^[A-Z]{2,4}-[0-9]{3,6}$\"\n</code></pre>"},{"location":"pattern-matching/#4-test-thoroughly","title":"4. Test Thoroughly","text":"<p>Create test cases for both valid and invalid values:</p> <pre><code># Test cases in comments\n# Valid: user@company.com, team.lead@example.org\n# Invalid: username, user@domain, @company.com\nOwner:\n  pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n</code></pre>"},{"location":"pattern-matching/#5-consider-migration","title":"5. Consider Migration","text":"<p>Plan migration from simple to pattern validation:</p> <pre><code># Phase 1: Simple validation\nrequired_tags:\n  - Environment\n  - Owner\n\n# Phase 2: Add patterns gradually\nrequired_tags:\n  Environment:\n    pattern: \"^(dev|test|prod)$\"\n  Owner: {}  # Still simple validation\n\n# Phase 3: Full pattern validation\nrequired_tags:\n  Environment:\n    pattern: \"^(dev|test|staging|prod)$\"\n  Owner:\n    pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"\n</code></pre>"},{"location":"pattern-matching/#performance-considerations","title":"Performance Considerations","text":""},{"location":"pattern-matching/#pattern-complexity-impact","title":"Pattern Complexity Impact","text":"<p>Pattern validation performance depends on regex complexity:</p> <ul> <li>Simple patterns (literal strings, basic character classes): Fastest</li> <li>Medium patterns (alternation, quantifiers): Good performance  </li> <li>Complex patterns (nested groups, lookaheads): May impact performance with large files</li> </ul>"},{"location":"pattern-matching/#best-practices-for-performance","title":"Best Practices for Performance","text":"<ol> <li>Use Specific Patterns: Prefer <code>^(dev|test|prod)$</code> over <code>.*dev.*</code></li> <li>Avoid Excessive Backtracking: Be careful with patterns like <code>(a+)+b</code></li> <li>Test at Scale: Validate performance with large Terraform configurations</li> <li>Profile When Needed: Use verbose mode to identify slow validations</li> </ol>"},{"location":"pattern-matching/#optimization-tips","title":"Optimization Tips","text":"<pre><code># Good: Specific and efficient\nEnvironment:\n  pattern: \"^(dev|test|staging|prod)$\"\n\n# Avoid: Overly broad and potentially slow\nEnvironment:\n  pattern: \".*\"\n</code></pre>"},{"location":"pattern-matching/#integration-examples","title":"Integration Examples","text":""},{"location":"pattern-matching/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code># GitHub Actions example\n- name: Validate Tags\n  run: |\n    terratags -config .terratags.yaml -dir ./terraform\n    if [ $? -ne 0 ]; then\n      echo \"Tag validation failed. Please fix tag patterns.\"\n      exit 1\n    fi\n</code></pre>"},{"location":"pattern-matching/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0\n    hooks:\n      - id: terratags\n        args: [--config=.terratags.yaml, --remediate]\n</code></pre>"},{"location":"pattern-matching/#terraform-plan-integration","title":"Terraform Plan Integration","text":"<pre><code># Validate against Terraform plan\nterraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"pattern-matching/#gitlab-ci-integration","title":"GitLab CI Integration","text":"<pre><code># .gitlab-ci.yml\nvalidate-tags:\n  stage: validate\n  script:\n    - terratags -config .terratags.yaml -dir ./terraform\n  rules:\n    - changes:\n        - \"**/*.tf\"\n</code></pre>"},{"location":"pattern-matching/#jenkins-pipeline-integration","title":"Jenkins Pipeline Integration","text":"<pre><code>pipeline {\n    agent any\n    stages {\n        stage('Validate Tags') {\n            steps {\n                sh 'terratags -config config.yaml -dir ./terraform'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pattern-matching/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pattern-matching/#pattern-not-matching","title":"Pattern Not Matching","text":"<ol> <li>Check Escaping: Ensure backslashes are properly escaped in YAML</li> <li>Verify Anchors: Use <code>^</code> and <code>$</code> to match entire string</li> <li>Test Online: Use regex testing tools to validate patterns</li> <li>Check Case: Patterns are case-sensitive by default</li> </ol>"},{"location":"pattern-matching/#performance-considerations_1","title":"Performance Considerations","text":"<ol> <li>Simple Patterns: Use simple patterns when possible</li> <li>Avoid Backtracking: Be careful with complex nested patterns</li> <li>Test at Scale: Validate performance with large Terraform files</li> </ol>"},{"location":"pattern-matching/#common-regex-gotchas","title":"Common Regex Gotchas","text":"<ol> <li>Greedy Matching: <code>.*</code> matches as much as possible</li> <li>Escaping Dots: Use <code>\\\\.</code> to match literal dots</li> <li>Word Boundaries: Use <code>\\\\b</code> for word boundaries in YAML</li> <li>Unicode: Go regex supports Unicode by default</li> </ol>"},{"location":"pattern-matching/#reference","title":"Reference","text":""},{"location":"pattern-matching/#regex-quick-reference","title":"Regex Quick Reference","text":"Pattern Description Example <code>^</code> Start of string <code>^dev</code> <code>$</code> End of string <code>prod$</code> <code>.</code> Any character <code>a.c</code> matches <code>abc</code> <code>*</code> Zero or more <code>ab*</code> matches <code>a</code>, <code>ab</code>, <code>abb</code> <code>+</code> One or more <code>ab+</code> matches <code>ab</code>, <code>abb</code> <code>?</code> Zero or one <code>ab?</code> matches <code>a</code>, <code>ab</code> <code>{n}</code> Exactly n <code>a{3}</code> matches <code>aaa</code> <code>{n,m}</code> Between n and m <code>a{2,4}</code> matches <code>aa</code>, <code>aaa</code>, <code>aaaa</code> <code>[abc]</code> Character class <code>[abc]</code> matches <code>a</code>, <code>b</code>, or <code>c</code> <code>[a-z]</code> Character range <code>[a-z]</code> matches any lowercase letter <code>[^abc]</code> Negated class <code>[^abc]</code> matches anything except <code>a</code>, <code>b</code>, <code>c</code> <code>\\|</code> Alternation <code>cat\\|dog</code> matches <code>cat</code> or <code>dog</code> <code>()</code> Grouping <code>(ab)+</code> matches <code>ab</code>, <code>abab</code> <code>\\\\</code> Escape character <code>\\\\.</code> matches literal dot"},{"location":"pattern-matching/#go-regex-documentation","title":"Go Regex Documentation","text":"<p>For complete regex syntax, see the Go regexp documentation.</p>"},{"location":"pattern-matching/#testing-tools","title":"Testing Tools","text":"<ul> <li>Regex101 - Online regex tester</li> <li>RegExr - Interactive regex learning tool</li> <li>RegexPal - Simple regex tester</li> </ul>"},{"location":"pre-commit/","title":"Pre-commit Hook Integration","text":"<p>Terratags can be integrated with pre-commit to automatically validate tags before commits are made to your repository.</p>"},{"location":"pre-commit/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install pre-commit:    <pre><code>pip install pre-commit\n</code></pre></p> </li> <li> <p>Ensure you have a terratags configuration file in your repository (see Configuration)</p> </li> </ol>"},{"location":"pre-commit/#basic-setup","title":"Basic Setup","text":"<ol> <li>Create or update your <code>.pre-commit-config.yaml</code> file in your repository root:</li> </ol> <pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0  # Use the latest version (available from v0.3.0+)\n    hooks:\n      - id: terratags\n</code></pre> <ol> <li> <p>Install the pre-commit hook:    <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Create your <code>terratags.yaml</code> configuration file:    <pre><code>required_tags:\n  - Environment\n  - Owner\n  - Project\n</code></pre></p> </li> </ol>"},{"location":"pre-commit/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"pre-commit/#custom-configuration-file","title":"Custom Configuration File","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0\n    hooks:\n      - id: terratags\n        args: [--config=custom-config.yaml]\n</code></pre>"},{"location":"pre-commit/#generate-html-report","title":"Generate HTML Report","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --report=tag-report.html]\n</code></pre>"},{"location":"pre-commit/#show-remediation-suggestions","title":"Show Remediation Suggestions","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --remediate]\n</code></pre>"},{"location":"pre-commit/#use-exemptions","title":"Use Exemptions","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --exemptions=exemptions.yaml]\n</code></pre>"},{"location":"pre-commit/#custom-directory","title":"Custom Directory","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --dir=./infrastructure]\n</code></pre>"},{"location":"pre-commit/#multiple-hook-configurations","title":"Multiple Hook Configurations","text":"<p>You can define multiple hooks for different purposes:</p> <pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v0.3.0\n    hooks:\n      # Basic validation on every commit\n      - id: terratags\n        name: terratags-validate\n        args: [--config=terratags.yaml]\n\n      # Generate report (manual stage)\n      - id: terratags\n        name: terratags-report\n        args: [--config=terratags.yaml, --report=reports/tags.html]\n        stages: [manual]\n\n      # Show remediation suggestions\n      - id: terratags\n        name: terratags-remediate\n        args: [--config=terratags.yaml, --remediate]\n        stages: [manual]\n</code></pre>"},{"location":"pre-commit/#usage-examples","title":"Usage Examples","text":""},{"location":"pre-commit/#basic-workflow","title":"Basic Workflow","text":"<ol> <li>Make changes to your Terraform files</li> <li>Attempt to commit:    <pre><code>git add .\ngit commit -m \"Add new resources\"\n</code></pre></li> <li>Terratags will automatically run and validate your tags</li> <li>If validation fails, fix the issues and commit again</li> </ol>"},{"location":"pre-commit/#manual-report-generation","title":"Manual Report Generation","text":"<pre><code># Run terratags report generation\npre-commit run terratags-report --hook-stage manual\n\n# Run terratags with remediation suggestions\npre-commit run terratags-remediate --hook-stage manual\n</code></pre>"},{"location":"pre-commit/#skip-hook-for-emergency-commits","title":"Skip Hook for Emergency Commits","text":"<pre><code># Skip all pre-commit hooks\ngit commit -m \"Emergency fix\" --no-verify\n\n# Skip only terratags hook\nSKIP=terratags git commit -m \"Skip terratags validation\"\n</code></pre>"},{"location":"pre-commit/#file-filtering","title":"File Filtering","text":"<p>The terratags pre-commit hook is configured to only run on Terraform configuration files: - <code>*.tf</code> files</p> <p>This ensures the hook only runs when relevant files are changed, improving performance.</p> <p>Note: Pre-commit hooks validate Terraform source files only. For validating Terraform plan output, use the <code>--plan</code> flag in your CI/CD pipeline as described in the main README.</p>"},{"location":"pre-commit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pre-commit/#hook-not-running","title":"Hook Not Running","text":"<ol> <li>Ensure pre-commit is installed: <code>pre-commit --version</code></li> <li>Ensure hooks are installed: <code>pre-commit install</code></li> <li>Check your <code>.pre-commit-config.yaml</code> syntax</li> </ol>"},{"location":"pre-commit/#configuration-file-not-found","title":"Configuration File Not Found","text":"<ol> <li>Ensure your terratags configuration file exists in the repository root</li> <li>Use the <code>--config</code> argument to specify a custom path</li> <li>Check the file name matches what you specified in args</li> </ol>"},{"location":"pre-commit/#validation-failures","title":"Validation Failures","text":"<ol> <li>Use <code>--remediate</code> to see suggested fixes</li> <li>Check exemptions if certain resources should be excluded</li> <li>Review your required tags configuration</li> </ol>"},{"location":"pre-commit/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>Pre-commit hooks work well with CI/CD pipelines. You can run the same validations in your CI:</p> <pre><code># GitHub Actions example\n- name: Run pre-commit\n  uses: pre-commit/action@v3.0.0\n</code></pre> <p>This ensures that even if developers skip local pre-commit hooks, the validation still runs in CI.</p>"},{"location":"providers/","title":"Supported Providers","text":"<p>This document lists the providers and versions supported by Terratags.</p> Provider Version azapi 2.7.0 aws 6.17.0 awscc 1.60.0 azurerm 4.49.0 google 7.7.0 <p>This file is automatically generated by the <code>update_resources.go</code> script.</p>"},{"location":"remote-config/","title":"Remote Config Files","text":"<p>Terratags supports loading configuration files from remote locations, enabling centralized config management across multiple repositories.</p>"},{"location":"remote-config/#supported-sources","title":"Supported Sources","text":""},{"location":"remote-config/#httphttps-urls","title":"HTTP/HTTPS URLs","text":"<p>Fetch config directly from any web server:</p> <pre><code>terratags -config https://example.com/configs/terratags.yaml -dir ./infra\n</code></pre> <p>Example with GitHub raw: <pre><code>terratags -config https://raw.githubusercontent.com/org/configs/main/terratags.yaml -dir ./infra\n</code></pre></p>"},{"location":"remote-config/#git-repositories-https","title":"Git Repositories (HTTPS)","text":"<p>Clone a Git repository and extract the config file:</p> <pre><code># With branch\nterratags -config https://github.com/org/configs.git//terratags.yaml?ref=main -dir ./infra\n\n# With tag\nterratags -config https://github.com/org/configs.git//terratags.yaml?ref=v1.0.0 -dir ./infra\n\n# With subdirectory\nterratags -config https://github.com/org/configs.git//terraform/prod/terratags.yaml?ref=main -dir ./infra\n</code></pre>"},{"location":"remote-config/#git-repositories-ssh","title":"Git Repositories (SSH)","text":"<p>Use SSH authentication for private repositories:</p> <pre><code>terratags -config git@github.com:org/configs.git//terratags.yaml?ref=main -dir ./infra\n</code></pre>"},{"location":"remote-config/#url-format","title":"URL Format","text":""},{"location":"remote-config/#git-urls","title":"Git URLs","text":"<p>Git URLs follow the Terraform module source convention:</p> <pre><code>&lt;git-url&gt;//&lt;file-path&gt;?ref=&lt;branch-or-tag&gt;\n</code></pre> <ul> <li><code>&lt;git-url&gt;</code>: Repository URL (HTTPS or SSH)</li> <li><code>//</code>: Separator between repo and file path</li> <li><code>&lt;file-path&gt;</code>: Path to config file within the repository</li> <li><code>?ref=</code>: Optional branch, tag, or commit reference</li> </ul>"},{"location":"remote-config/#supported-file-types","title":"Supported File Types","text":"<p>Only these extensions are allowed: - <code>.yaml</code> - <code>.yml</code> - <code>.json</code></p>"},{"location":"remote-config/#authentication","title":"Authentication","text":""},{"location":"remote-config/#httphttps","title":"HTTP/HTTPS","text":"<p>Authentication is handled by your system's HTTP client. For private endpoints, configure appropriate credentials.</p>"},{"location":"remote-config/#git-https","title":"Git HTTPS","text":"<p>Uses your git credential helper:</p> <pre><code># Configure credential storage\ngit config --global credential.helper store\n\n# Or use credential manager\ngit config --global credential.helper manager\n</code></pre>"},{"location":"remote-config/#git-ssh","title":"Git SSH","text":"<p>Uses SSH keys from <code>~/.ssh/</code>:</p> <pre><code># Add your key to ssh-agent\nssh-add ~/.ssh/id_rsa\n\n# Test SSH connection\nssh -T git@github.com\n</code></pre>"},{"location":"remote-config/#use-cases","title":"Use Cases","text":""},{"location":"remote-config/#centralized-configuration","title":"Centralized Configuration","text":"<p>Maintain a single source of truth for tag requirements:</p> <pre><code># All teams use the same config\nterratags -config https://github.com/company/standards.git//terraform/tags.yaml?ref=main -dir ./infra\n</code></pre>"},{"location":"remote-config/#environment-specific-configs","title":"Environment-Specific Configs","text":"<p>Use different configs per environment:</p> <pre><code># Production\nterratags -config https://github.com/org/configs.git//prod.yaml?ref=main -dir ./infra\n\n# Development\nterratags -config https://github.com/org/configs.git//dev.yaml?ref=main -dir ./infra\n</code></pre>"},{"location":"remote-config/#version-pinning","title":"Version Pinning","text":"<p>Pin to specific config versions:</p> <pre><code># Use tagged version\nterratags -config https://github.com/org/configs.git//terratags.yaml?ref=v2.1.0 -dir ./infra\n</code></pre>"},{"location":"remote-config/#examples","title":"Examples","text":"<p>See the remote_config examples directory for working examples and test scripts.</p>"},{"location":"remote-config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"remote-config/#unsupported-file-type-error","title":"\"unsupported file type\" error","text":"<p>Ensure your URL ends with <code>.yaml</code>, <code>.yml</code>, or <code>.json</code>:</p> <pre><code># \u2717 Wrong\nterratags -config https://example.com/config\n\n# \u2713 Correct\nterratags -config https://example.com/config.yaml\n</code></pre>"},{"location":"remote-config/#repository-not-found-error","title":"\"repository not found\" error","text":"<p>For Git URLs: - Verify the repository URL is correct - Check authentication (SSH keys or git credentials) - Ensure you have access to the repository</p>"},{"location":"remote-config/#failed-to-clone-error","title":"\"failed to clone\" error","text":"<ul> <li>Check network connectivity</li> <li>Verify SSH keys are loaded (<code>ssh-add -l</code>)</li> <li>Test git access: <code>git clone &lt;repo-url&gt;</code></li> </ul>"},{"location":"sample-reports/","title":"Sample HTML Reports","text":""},{"location":"sample-reports/#module-blocks-report","title":"Module Blocks Report","text":""},{"location":"sample-reports/#resource-blocks-report","title":"Resource Blocks Report","text":""},{"location":"sample-reports/#provider-default-tags-report","title":"Provider Default Tags Report","text":""},{"location":"sample-reports/#awscc-resources-report","title":"AWSCC Resources Report","text":"<p>This report shows how Terratags handles AWSCC resources, including the new \"Excluded\" category for resources with non-compliant tag schemas.</p>"},{"location":"usage/","title":"Usage","text":"<p>Terratags can be used in various ways to validate tags on AWS and Azure resources in your Terraform configurations.</p>"},{"location":"usage/#validation-modes","title":"Validation Modes","text":"<p>Terratags supports two validation modes:</p>"},{"location":"usage/#directory-validation-direct-resources","title":"Directory Validation (Direct Resources)","text":"<p>Analyzes Terraform files directly and validates: - Resources defined in your <code>.tf</code> files - Module calls and their input tags</p> <pre><code>terratags -config config.yaml -dir ./infra\n</code></pre>"},{"location":"usage/#plan-validation-all-resources","title":"Plan Validation (All Resources)","text":"<p>Analyzes Terraform plan output and validates: - Resources defined in your <code>.tf</code> files - Resources created by external modules - Complete infrastructure with tag inheritance</p> <pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre> <p>Recommendation: Use plan validation for comprehensive coverage including module-created resources.</p>"},{"location":"usage/#command-examples","title":"Command Examples","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code>terratags -config config.yaml -dir ./infra\n</code></pre>"},{"location":"usage/#remote-config-files","title":"Remote Config Files","text":"<p>Load configuration from remote locations:</p> <pre><code># HTTP/HTTPS URL\nterratags -config https://example.com/configs/terratags.yaml -dir ./infra\n\n# Git repository\nterratags -config https://github.com/org/configs.git//terratags.yaml?ref=main -dir ./infra\n</code></pre> <p>See Remote Config Files for more details.</p>"},{"location":"usage/#generate-html-report","title":"Generate HTML Report","text":"<p>Generate a detailed HTML report of tag compliance:</p> <pre><code>terratags -config config.yaml -dir ./infra -report report.html\n</code></pre>"},{"location":"usage/#validate-terraform-plan-recommended","title":"Validate Terraform Plan (Recommended)","text":"<p>Validate tags in a Terraform plan output including module resources:</p> <pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"usage/#show-auto-remediation-suggestions","title":"Show Auto-remediation Suggestions","text":"<p>Get suggestions for fixing non-compliant resources:</p> <pre><code>terratags -config config.yaml -dir ./infra -remediate\n</code></pre>"},{"location":"usage/#use-exemptions","title":"Use Exemptions","text":"<p>Apply exemptions to specific resources:</p> <pre><code>terratags -config config.yaml -dir ./infra -exemptions exemptions.yaml\n</code></pre>"},{"location":"usage/#verbose-output","title":"Verbose Output","text":"<p>For more detailed output, use the <code>-verbose</code> flag:</p> <pre><code>terratags -config config.yaml -dir ./infra -verbose\n</code></pre> <p>This will show additional information about the validation process, including:</p> <ul> <li>Files being analyzed</li> <li>Resources being checked</li> <li>Tag inheritance from default_tags</li> <li>Exemptions being applied</li> </ul>"},{"location":"usage/#exit-codes","title":"Exit Codes","text":"<p>Terratags uses the following exit codes:</p> <ul> <li><code>0</code>: All resources are compliant with tagging requirements</li> <li><code>1</code>: One or more resources are missing required tags</li> <li><code>2</code>: Error in configuration or execution</li> </ul> <p>This makes it easy to integrate Terratags into CI/CD pipelines and fail builds when tag requirements are not met.</p>"},{"location":"usage/#working-with-large-codebases","title":"Working with Large Codebases","text":"<p>For large Terraform codebases, you can:</p> <ol> <li> <p>Run Terratags on specific directories:    <pre><code>terratags -config config.yaml -dir ./infra/modules/networking\n</code></pre></p> </li> <li> <p>Use the plan-based approach to only validate resources that are changing:    <pre><code>terraform plan -out=tfplan -target=module.networking\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre></p> </li> </ol>"},{"location":"usage/#html-reports","title":"HTML Reports","text":"<p>The HTML report provides a visual representation of tag compliance across your Terraform resources, making it easy to identify which resources need attention and track compliance metrics.</p> <p>To generate a report:</p> <pre><code>terratags -config config.yaml -dir ./infra -report report.html\n</code></pre> <p>The report includes:</p> <ul> <li>Overall compliance percentage</li> <li>List of compliant and non-compliant resources</li> <li>Missing tags for each non-compliant resource</li> <li>Summary statistics</li> </ul>"},{"location":"usage/#log-levels","title":"Log Levels","text":"<p>Terratags supports different log levels to control the verbosity of output:</p> <pre><code>terratags -config config.yaml -dir ./infra -log-level INFO\n</code></pre> <p>Available log levels:</p> <ul> <li><code>DEBUG</code>: Shows all debug information, including detailed tag discovery</li> <li><code>INFO</code>: Shows informational messages (same as using the <code>-verbose</code> flag)</li> <li><code>WARN</code>: Shows only warnings and errors</li> <li><code>ERROR</code>: Shows only errors (default)</li> </ul> <p>For backward compatibility, the <code>-verbose</code> flag is equivalent to <code>-log-level INFO</code>.</p>"},{"location":"usage/#case-insensitive-tag-matching","title":"Case-Insensitive Tag Matching","text":"<p>By default, Terratags performs case-sensitive matching for tag keys. To enable case-insensitive matching, use the <code>-ignore-case</code> flag:</p> <pre><code>terratags -config config.yaml -dir ./infra -ignore-case\n</code></pre> <p>With this option enabled, tag keys like \"Environment\", \"ENVIRONMENT\", and \"environment\" will all match a required tag key \"Environment\".</p>"},{"location":"user-scenarios/","title":"User Scenarios","text":""},{"location":"user-scenarios/#scenario-1-multi-environment-deployment","title":"Scenario 1: Multi-Environment Deployment","text":"<p>For a project with multiple environments, you might have different tag requirements for each environment:</p> <pre><code># dev-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n</code></pre> <pre><code># prod-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n  - CostCenter\n  - DataClassification\n</code></pre> <p>You can then validate each environment with the appropriate configuration:</p> <pre><code>terratags -config dev-config.yaml -dir ./infra/environments/dev\nterratags -config prod-config.yaml -dir ./infra/environments/prod\n</code></pre>"},{"location":"user-scenarios/#scenario-2-gradual-tag-implementation","title":"Scenario 2: Gradual Tag Implementation","text":"<p>When implementing tagging policies gradually, you might start with a subset of required tags and add more over time:</p> <pre><code># phase1-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n</code></pre> <pre><code># phase2-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre> <p>You can use exemptions to gradually roll out the new requirements:</p> <pre><code># phase2-exemptions.yaml\nexemptions:\n  - resource_type: \"*\"\n    resource_name: \"*\"\n    exempt_tags: [Project]\n    reason: \"Project tag requirement being phased in\"\n</code></pre> <pre><code>terratags -config phase2-config.yaml -dir ./infra -exemptions phase2-exemptions.yaml\n</code></pre> <p>As teams update their resources, you can remove exemptions until all resources comply with the full tagging policy.</p>"},{"location":"assets/logging/","title":"Logging","text":"<p>Terratags provides a flexible logging system that allows you to control the verbosity and detail of output during execution. This document explains how to configure and use the logging functionality.</p>"},{"location":"assets/logging/#log-levels","title":"Log Levels","text":"<p>Terratags supports the following log levels, in order of increasing severity:</p> <ul> <li><code>DEBUG</code>: Detailed information, typically useful only for diagnosing problems</li> <li><code>INFO</code>: Confirmation that things are working as expected</li> <li><code>WARN</code>: Indication that something unexpected happened, but the process can continue</li> <li><code>ERROR</code>: Due to a more serious problem, the process couldn't perform a specific function</li> </ul>"},{"location":"assets/logging/#setting-the-log-level","title":"Setting the Log Level","text":"<p>You can set the log level using the <code>-log-level</code> or <code>-l</code> command-line flag:</p> <pre><code>terratags -config config.yaml -log-level DEBUG\n</code></pre> <p>Or using the short form:</p> <pre><code>terratags -c config.yaml -l DEBUG\n</code></pre> <p>The default log level is <code>ERROR</code> if not specified.</p>"},{"location":"assets/logging/#examples","title":"Examples","text":""},{"location":"assets/logging/#basic-usage","title":"Basic Usage","text":"<pre><code># Run with default ERROR level logging\nterratags -config config.yaml\n\n# Run with INFO level for more detailed output\nterratags -config config.yaml -log-level INFO\n\n# Run with DEBUG level for maximum verbosity\nterratags -config config.yaml -log-level DEBUG\n</code></pre>"},{"location":"assets/logging/#troubleshooting","title":"Troubleshooting","text":"<p>If you're experiencing issues with Terratags, running with the <code>DEBUG</code> log level can provide additional information to help diagnose the problem:</p> <pre><code>terratags -config config.yaml -log-level DEBUG\n</code></pre> <p>This will output detailed information about each step of the process, including file parsing, tag validation, and any errors encountered.</p>"},{"location":"assets/logging/#log-output-format","title":"Log Output Format","text":"<p>Terratags uses a custom logging format where the log level appears before the timestamp. Here are examples of how logs appear at different levels:</p>"},{"location":"assets/logging/#debug-level-output","title":"DEBUG Level Output","text":"<pre><code>DEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tags attribute in awscc_s3_bucket name\nDEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tag key: Name with value: test\n</code></pre>"},{"location":"assets/logging/#info-level-output","title":"INFO Level Output","text":"<pre><code>INFO    2025-05-18T20:33:48.265-0400    Loaded configuration with 4 required tags\nINFO    2025-05-18T20:33:48.266-0400    Validating Terraform directory: ../awscc_examples/\nINFO    2025-05-18T20:33:48.267-0400    Found 1 Terraform files to analyze\nINFO    2025-05-18T20:33:48.267-0400    Analyzing file: ../awscc_examples/main.tf\n</code></pre>"},{"location":"assets/logging/#warn-level-output","title":"WARN Level Output","text":"<pre><code>WARN    2025-05-18T20:33:48.269-0400    Resource aws_s3_bucket.example is missing required tag: Environment\n</code></pre>"},{"location":"assets/logging/#error-level-output","title":"ERROR Level Output","text":"<pre><code>ERROR   2025-05-18T20:33:48.270-0400    Failed to parse configuration file: invalid syntax at line 15\n</code></pre>"},{"location":"assets/logging/#logging-implementation","title":"Logging Implementation","text":"<p>Terratags uses a custom logging implementation based on Zap, which provides:</p> <ul> <li>High-performance, structured logging</li> <li>Configurable output formats</li> <li>Multiple log levels</li> </ul>"}]}