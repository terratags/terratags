{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terratags","text":"<p>Terratags is a tool for validating tags on resources in Terraform configurations.</p>"},{"location":"#overview","title":"Overview","text":"<p>Consistent tagging is crucial for:</p> <ul> <li>Cost allocation and tracking</li> <li>Resource ownership identification</li> <li>Environment classification</li> <li>Security and compliance requirements</li> <li>Automation and resource management</li> </ul> <p>Terratags helps enforce these tagging standards across your infrastructure, ensuring that all resources are properly tagged according to your organization's policies.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Tag Validation: Validates required tags on AWS and Azure resources</li> <li>Default Tags Support: Supports AWS provider default_tags</li> <li>AWSCC Support: Supports AWSCC provider tag format ( Refer exclusion list for resources with non compliant tag schema)</li> <li>Azure Support: Supports Azure providers (azurerm and azapi)</li> <li>Module-Level Tags: Supports module-level tags</li> <li>Exemption Support: Supports exemptions for specific resources</li> <li>HTML Reports: Generates HTML reports of tag compliance</li> <li>Auto-Remediation: Provides auto-remediation suggestions</li> <li>Plan Integration: Integrates with Terraform plan output</li> <li>Tag Inheritance: Tracks tag inheritance from provider default_tags</li> <li>Exemption Tracking: Tracks and reports on exemptions</li> <li>Excluded Resources: Tracks AWSCC resources with non-compliant tag schemas</li> </ul> <p>Open issues for other providers: - Google provider - Azure providers : Keeping this open as there are additional Azure providers.</p>"},{"location":"#not-validated","title":"Not validated","text":"<ul> <li>The behavior with provider aliases is not tested and so the evaluation cannot be guaranteed.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Using Homebrew\nbrew install terratags/tap/terratags\n\n# Using Go\ngo install github.com/terratags/terratags@latest\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>terratags -config config.yaml -dir ./infra\n</code></pre> <p>Check out the documentation for more detailed information on configuration and usage.</p>"},{"location":"#sample-report","title":"Sample Report","text":"<p>When you generate an HTML report with Terratags, it will look similar to this:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Terraform Tag Compliance Report           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Generated on: 2025-05-16                           \u2502\n\u2502                                                     \u2502\n\u2502 Summary:                                            \u2502\n\u2502 \u2713 Total Resources: 4                                \u2502\n\u2502 \u2713 Compliant Resources: 2                            \u2502\n\u2502 \u2717 Non-compliant Resources: 2                        \u2502\n\u2502                                                     \u2502\n\u2502 [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------] 50.0%     \u2502\n\u2502                                                     \u2502\n\u2502 Non-compliant Resources:                            \u2502\n\u2502 \u2717 aws_s3_bucket \"data_bucket\"                       \u2502\n\u2502   Missing Tags: Environment, Owner, Project         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The HTML report provides a visual representation of tag compliance across your Terraform resources, making it easy to identify which resources need attention and track compliance metrics.</p>"},{"location":"awscc_support/","title":"AWSCC Provider Support","text":"<p>Terratags now supports the AWS Cloud Control (AWSCC) provider's tag format, which differs from the standard AWS provider tag format.</p>"},{"location":"awscc_support/#tag-format-differences","title":"Tag Format Differences","text":""},{"location":"awscc_support/#aws-provider-tag-format","title":"AWS Provider Tag Format","text":"<p>The AWS provider uses a map of key-value pairs for tags:</p> <pre><code>resource \"aws_s3_bucket\" \"example\" {\n  bucket = \"example-bucket\"\n\n  tags = {\n    Name        = \"Example Bucket\"\n    Environment = \"Test\"\n    Owner       = \"DevOps\"\n    Project     = \"Terratags\"\n  }\n}\n</code></pre>"},{"location":"awscc_support/#awscc-provider-tag-format","title":"AWSCC Provider Tag Format","text":"<p>The AWSCC provider uses a list of maps with <code>key</code> and <code>value</code> fields:</p> <pre><code>resource \"awscc_apigateway_rest_api\" \"example\" {\n  name = \"example-api\"\n\n  tags = [\n    {\n      key   = \"Name\"\n      value = \"Example API\"\n    },\n    {\n      key   = \"Environment\"\n      value = \"Test\"\n    },\n    {\n      key   = \"Owner\"\n      value = \"API Team\"\n    },\n    {\n      key   = \"Project\"\n      value = \"Terratags\"\n    }\n  ]\n}\n</code></pre>"},{"location":"awscc_support/#default-tags-support","title":"Default Tags Support","text":"<p>Important: The AWSCC provider does not support <code>default_tags</code>. Each AWSCC resource must specify all required tags directly in its <code>tags</code> attribute.</p> <pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  # AWS provider supports default_tags\n  default_tags {\n    tags = {\n      Owner       = \"DevOps\"\n      Project     = \"Terratags\"\n    }\n  }\n}\n\nprovider \"awscc\" {\n  region = \"us-west-2\"\n  # AWSCC provider doesn't support default_tags\n}\n</code></pre>"},{"location":"awscc_support/#validation","title":"Validation","text":"<p>Terratags validates AWSCC resources by:</p> <ol> <li>Detecting resources with the <code>awscc_</code> prefix</li> <li>Parsing the list-of-maps tag format</li> <li>Validating that all required tags are present</li> <li>Reporting any missing tags</li> </ol>"},{"location":"awscc_support/#example","title":"Example","text":"<p>Here's a complete example showing both AWS and AWSCC resources with their respective tag formats:</p> <pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n    awscc = {\n      source  = \"hashicorp/awscc\"\n      version = \"~&gt; 0.67\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Owner       = \"DevOps\"\n      Project     = \"Terratags\"\n    }\n  }\n}\n\nprovider \"awscc\" {\n  region = \"us-west-2\"\n}\n\n# AWS resource with tags in map format\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"example-bucket\"\n\n  tags = {\n    Name        = \"Example Bucket\"\n    Environment = \"Test\"\n    # Owner and Project come from default_tags\n  }\n}\n\n# AWSCC resource with tags in list-of-maps format\nresource \"awscc_apigateway_rest_api\" \"example\" {\n  name = \"example-api\"\n\n  tags = [\n    {\n      key   = \"Name\"\n      value = \"Example API\"\n    },\n    {\n      key   = \"Environment\"\n      value = \"Test\"\n    },\n    {\n      key   = \"Owner\"\n      value = \"API Team\"\n    },\n    {\n      key   = \"Project\"\n      value = \"Terratags\"\n    }\n  ]\n}\n</code></pre>"},{"location":"awscc_support/#excluded-awscc-resources","title":"Excluded AWSCC Resources","text":"<p>Some AWSCC resources have non-compliant tag schemas and are excluded from validation. These resources are shown in a separate \"Excluded\" category in the compliance report.</p> <p>The compliance percentage calculation doesn't include these excluded resources, ensuring that your compliance metrics accurately reflect only the resources that should be properly tagged.</p> <p>Excluded resources include:  - <code>awscc_amplifyuibuilder_component</code> - <code>awscc_amplifyuibuilder_form</code> - <code>awscc_amplifyuibuilder_theme</code> - <code>awscc_apigatewayv2_api</code> - <code>awscc_apigatewayv2_domain_name</code> - <code>awscc_apigatewayv2_vpc_link</code> - <code>awscc_batch_compute_environment</code> - <code>awscc_batch_job_queue</code> - <code>awscc_batch_scheduling_policy</code> - <code>awscc_bedrock_agent</code> - <code>awscc_bedrock_agent_alias</code> - <code>awscc_bedrock_knowledge_base</code> - <code>awscc_eks_nodegroup</code> - <code>awscc_fis_experiment_template</code> - <code>awscc_greengrassv2_component_version</code> - And others with non-standard tag implementations</p> <p>These resources are identified in the HTML report in a dedicated \"Excluded Resources\" section.</p>"},{"location":"awscc_support/#sample-report-with-excluded-resources","title":"Sample Report with Excluded Resources","text":"<p>You can see an example of how excluded resources appear in the HTML report here: AWSCC Sample Report</p> <p></p> <p>This sample report shows how excluded resources are separated from the compliance calculation and displayed in their own section.</p>"},{"location":"azure-support/","title":"Azure Support in Terratags","text":"<p>Terratags now supports Azure resources through both the <code>azurerm</code> and <code>azapi</code> providers.</p>"},{"location":"azure-support/#azurerm-provider","title":"Azurerm Provider","text":"<p>The <code>azurerm</code> provider supports tagging at the resource level. Terratags will automatically detect and manage tags for resources that support the <code>tags</code> attribute.</p> <p>Example:</p> <pre><code>resource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-resources\"\n  location = \"West Europe\"\n\n  tags = {\n    environment = \"production\"\n    department  = \"finance\"\n  }\n}\n</code></pre> <p>Note: The <code>azurerm</code> provider does not support default_tags at the provider level.</p>"},{"location":"azure-support/#azapi-provider","title":"Azapi Provider","text":"<p>The <code>azapi</code> provider supports tagging at both the provider level (via <code>default_tags</code>) and at the resource level.</p> <p>Example with provider-level default tags:</p> <pre><code>provider \"azapi\" {\n  default_tags = {\n    managed_by = \"terraform\"\n    project    = \"terratags-example\"\n  }\n}\n</code></pre> <p>Example with resource-level tags:</p> <pre><code>resource \"azapi_resource\" \"example\" {\n  type      = \"Microsoft.Storage/storageAccounts@2022-05-01\"\n  name      = \"examplestorageaccount\"\n  parent_id = azurerm_resource_group.example.id\n  location  = azurerm_resource_group.example.location\n\n  body = jsonencode({\n    kind = \"StorageV2\"\n    sku = {\n      name = \"Standard_LRS\"\n    }\n  })\n\n  tags = {\n    environment = \"development\"\n    department  = \"research\"\n  }\n}\n</code></pre>"},{"location":"azure-support/#supported-resources","title":"Supported Resources","text":"<p>Terratags automatically detects which Azure resources support tagging by analyzing the provider schemas. The list of taggable resources is generated during the build process.</p> <p>For the most up-to-date list of supported resources, refer to the provider documentation: - Azurerm Provider - Azapi Provider</p>"},{"location":"ci-cd/","title":"CI/CD Integration","text":"<p>Note: This documentation is autogenerated. Please consult the individual CI documentation if any of the configuration looks incorrect. We would appreciate a PR if you find an issue.</p> <p>Integrating Terratags into your CI/CD pipeline helps enforce tag compliance across your infrastructure. This page provides examples of how to integrate Terratags with popular CI/CD platforms.</p>"},{"location":"ci-cd/#github-actions","title":"GitHub Actions","text":"<p>Add Terratags to your GitHub Actions workflow:</p> <pre><code>name: Validate Tags\n\non:\n  pull_request:\n    paths:\n      - '**.tf'\n\njobs:\n  validate-tags:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: '1.24'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Validate Tags\n        run: terratags -config config.yaml -dir ./infra\n</code></pre>"},{"location":"ci-cd/#gitlab-ci","title":"GitLab CI","text":"<p>Add Terratags to your GitLab CI pipeline:</p> <pre><code>stages:\n  - validate\n\nvalidate-tags:\n  stage: validate\n  image: golang:1.24\n  script:\n    - go install github.com/terratags/terratags@latest\n    - terratags -config config.yaml -dir ./infra\n  only:\n    changes:\n      - \"**/*.tf\"\n</code></pre>"},{"location":"ci-cd/#azure-devops","title":"Azure DevOps","text":"<p>Add Terratags to your Azure DevOps pipeline:</p> <pre><code>trigger:\n  paths:\n    include:\n    - '**/*.tf'\n\npool:\n  vmImage: 'ubuntu-latest'\n\nsteps:\n- task: GoTool@0\n  inputs:\n    version: '1.24'\n\n- script: |\n    go install github.com/terratags/terratags@latest\n    terratags -config config.yaml -dir ./infra\n  displayName: 'Validate Tags'\n</code></pre>"},{"location":"ci-cd/#jenkins","title":"Jenkins","text":"<p>Add Terratags to your Jenkinsfile:</p> <pre><code>pipeline {\n    agent {\n        docker {\n            image 'golang:1.24'\n        }\n    }\n\n    stages {\n        stage('Validate Tags') {\n            when {\n                changeset \"**/*.tf\"\n            }\n            steps {\n                sh 'go install github.com/terratags/terratags@latest'\n                sh 'terratags -config config.yaml -dir ./infra'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ci-cd/#circleci","title":"CircleCI","text":"<p>Add Terratags to your CircleCI configuration:</p> <pre><code>version: 2.1\njobs:\n  validate-tags:\n    docker:\n      - image: cimg/go:1.24\n    steps:\n      - checkout\n      - run:\n          name: Install Terratags\n          command: go install github.com/terratags/terratags@latest\n      - run:\n          name: Validate Tags\n          command: terratags -config config.yaml -dir ./infra\n\nworkflows:\n  version: 2\n  terraform-workflow:\n    jobs:\n      - validate-tags:\n          filters:\n            paths:\n              - \"**/*.tf\"\n</code></pre>"},{"location":"ci-cd/#best-practices-for-cicd-integration","title":"Best Practices for CI/CD Integration","text":"<ol> <li>Fail Fast: Configure your pipeline to fail early if tag validation fails</li> <li>Generate Reports: Use the <code>-report</code> flag to generate HTML reports for each build</li> <li>Artifact Storage: Store the generated reports as build artifacts for easy access</li> <li>Selective Validation: Use path filters to only run validation when Terraform files change</li> <li>Pre-commit Hooks: Consider adding Terratags as a pre-commit hook for local validation before pushing</li> </ol>"},{"location":"ci-cd/#example-complete-github-actions-workflow","title":"Example: Complete GitHub Actions Workflow","text":"<p>Here's a more complete example for GitHub Actions that includes report generation and artifact storage:</p> <pre><code>name: Terraform Tag Validation\n\non:\n  pull_request:\n    paths:\n      - '**.tf'\n  push:\n    branches:\n      - main\n    paths:\n      - '**.tf'\n\njobs:\n  validate-tags:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: '1.24'\n\n      - name: Install Terratags\n        run: go install github.com/terratags/terratags@latest\n\n      - name: Validate Tags\n        run: terratags -config config.yaml -dir ./infra -report tag-report.html\n\n      - name: Upload Report\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: tag-validation-report\n          path: tag-report.html\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Terratags requires a configuration file that specifies which tags must be present on your AWS resources. This file can be in either YAML or JSON format.</p>"},{"location":"configuration/#required-tags-configuration","title":"Required Tags Configuration","text":""},{"location":"configuration/#yaml-format","title":"YAML Format","text":"<pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre>"},{"location":"configuration/#json-format","title":"JSON Format","text":"<pre><code>{\n  \"required_tags\": [\n    \"Name\",\n    \"Environment\",\n    \"Owner\",\n    \"Project\"\n  ]\n}\n</code></pre>"},{"location":"configuration/#command-options","title":"Command Options","text":"<p>Terratags supports the following command-line options:</p> <ul> <li><code>-config</code>, <code>-c</code>: Path to the config file (JSON/YAML) containing required tag keys (required)</li> <li><code>-dir</code>, <code>-d</code>: Path to the Terraform directory to analyze (default: current directory)</li> <li><code>-verbose</code>, <code>-v</code>: Enable verbose output</li> <li><code>-log-level</code>, <code>-l</code>: Set logging level: DEBUG, INFO, WARN, ERROR (default: ERROR)</li> <li><code>-plan</code>, <code>-p</code>: Path to Terraform plan JSON file to analyze</li> <li><code>-report</code>, <code>-r</code>: Path to output HTML report file</li> <li><code>-remediate</code>, <code>-re</code>: Show auto-remediation suggestions for non-compliant resources</li> <li><code>-exemptions</code>, <code>-e</code>: Path to exemptions file (JSON/YAML)</li> <li><code>-help</code>, <code>-h</code>: Show help message</li> <li><code>-version</code>, <code>-V</code>: Show version information</li> </ul>"},{"location":"configuration/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Start Simple: Begin with a small set of required tags and gradually expand</li> <li>Be Consistent: Use consistent naming conventions for your tags</li> <li>Document Purpose: Include comments in your configuration files explaining the purpose of each tag</li> <li>Version Control: Keep your configuration files in version control</li> <li>Team Alignment: Ensure your team understands the tagging requirements</li> </ol>"},{"location":"default-tags/","title":"Provider Default Tags Support","text":"<p>Terratags integrates with AWS provider's <code>default_tags</code> feature. When you define default tags in your AWS provider configuration, Terratags will recognize these tags and consider them when validating resources.</p>"},{"location":"default-tags/#how-default-tags-work","title":"How Default Tags Work","text":"<ol> <li>Tags defined in the AWS provider's <code>default_tags</code> block are automatically applied to all taggable resources created by that provider</li> <li>Terratags tracks tag inheritance from provider default_tags to individual resources</li> <li>Resources only need to specify tags not covered by default_tags</li> <li>Default tags can be overridden at the resource level if needed</li> </ol>"},{"location":"default-tags/#example-with-default-tags","title":"Example with Default Tags","text":"<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Environment = \"dev\"\n      Owner       = \"team-a\"\n      Project     = \"demo\"\n    }\n  }\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  # Only need to specify Name tag, as other required tags come from default_tags\n  tags = {\n    Name = \"example-instance\"\n  }\n}\n</code></pre> <p>In this example, the AWS instance will have all four required tags: <code>Name</code> from the resource-level tags, and <code>Environment</code>, <code>Owner</code>, and <code>Project</code> from the provider's default_tags.</p>"},{"location":"default-tags/#benefits-of-using-default-tags","title":"Benefits of Using Default Tags","text":"<ol> <li>Consistency: Ensures consistent tagging across all resources</li> <li>Reduced Duplication: Eliminates the need to repeat the same tags on every resource</li> <li>Centralized Management: Makes it easier to update tags across all resources</li> <li>Reduced Errors: Minimizes the chance of missing required tags</li> </ol>"},{"location":"default-tags/#default-tags-limitations","title":"Default Tags Limitations","text":"<ol> <li>Provider Specific: Only works with providers that support default_tags (like AWS)</li> <li>Override Behavior: Resource-level tags override default tags with the same key</li> <li>Module Awareness: When using modules, be aware of how default tags propagate</li> </ol>"},{"location":"default-tags/#best-practices","title":"Best Practices","text":"<ol> <li>Use for Common Tags: Use default_tags for tags that should be consistent across all resources</li> <li>Resource-Specific Tags: Use resource-level tags for tags that are specific to individual resources</li> <li>Documentation: Document which tags are provided by default_tags to avoid confusion</li> <li>Validation: Still use Terratags to validate that all required tags are present</li> </ol>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of how to use Terratags in various scenarios.</p>"},{"location":"examples/#configuration-examples","title":"Configuration Examples","text":""},{"location":"examples/#basic-required-tags-configuration-yaml","title":"Basic Required Tags Configuration (YAML)","text":"<pre><code>required_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre>"},{"location":"examples/#required-tags-with-descriptions-yaml","title":"Required Tags with Descriptions (YAML)","text":"<pre><code>required_tags:\n  - key: Name\n    description: \"Identifies the resource\"\n  - key: Environment\n    description: \"Deployment environment (dev, test, prod)\"\n  - key: Owner\n    description: \"Team or individual responsible for the resource\"\n  - key: Project\n    description: \"Project or application name\"\n</code></pre>"},{"location":"examples/#exemptions-configuration","title":"Exemptions Configuration","text":"<pre><code>exemptions:\n  - resource_type: aws_s3_bucket\n    resource_name: logs_bucket\n    exempt_tags: [Owner, Project]\n    reason: \"Legacy bucket used for system logs only\"\n\n  - resource_type: aws_dynamodb_table\n    resource_name: \"*\"\n    exempt_tags: [Environment]\n    reason: \"DynamoDB tables use environment from provider default_tags\"\n</code></pre>"},{"location":"examples/#terraform-examples","title":"Terraform Examples","text":""},{"location":"examples/#aws-provider-with-default-tags","title":"AWS Provider with Default Tags","text":"<pre><code>provider \"aws\" {\n  region = \"us-west-2\"\n\n  default_tags {\n    tags = {\n      Environment = \"dev\"\n      Owner       = \"team-a\"\n      Project     = \"demo\"\n    }\n  }\n}\n</code></pre>"},{"location":"examples/#resource-with-tags","title":"Resource with Tags","text":"<pre><code>resource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  tags = {\n    Name = \"example-instance\"\n    Environment = \"production\"\n    Owner = \"team-b\"\n    Project = \"website\"\n  }\n}\n</code></pre>"},{"location":"examples/#resource-with-default-tags","title":"Resource with Default Tags","text":"<pre><code>resource \"aws_instance\" \"example\" {\n  ami           = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n\n  # Only need to specify Name tag, as other required tags come from default_tags\n  tags = {\n    Name = \"example-instance\"\n  }\n}\n</code></pre>"},{"location":"examples/#module-with-tags","title":"Module with Tags","text":"<pre><code>module \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n  version = \"3.14.0\"\n\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"my-vpc\"\n    Environment = \"production\"\n    Owner = \"team-b\"\n    Project = \"website\"\n  }\n}\n</code></pre>"},{"location":"examples/#command-examples","title":"Command Examples","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<pre><code>terratags -config config.yaml -dir ./infra\n</code></pre>"},{"location":"examples/#generate-html-report","title":"Generate HTML Report","text":"<pre><code>terratags -config config.yaml -dir ./infra -report report.html\n</code></pre>"},{"location":"examples/#validate-terraform-plan","title":"Validate Terraform Plan","text":"<pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"examples/#show-auto-remediation-suggestions","title":"Show Auto-remediation Suggestions","text":"<pre><code>terratags -config config.yaml -dir ./infra -remediate\n</code></pre>"},{"location":"examples/#use-exemptions","title":"Use Exemptions","text":"<pre><code>terratags -config config.yaml -dir ./infra -exemptions exemptions.yaml\n</code></pre>"},{"location":"examples/#verbose-output","title":"Verbose Output","text":"<pre><code>terratags -config config.yaml -dir ./infra -verbose\n</code></pre>"},{"location":"examples/#additional-resources","title":"Additional Resources","text":"<p>For more detailed examples, please check:</p> <ul> <li>Sample HTML Reports - View examples of HTML reports generated by Terratags</li> <li>User Scenarios - Explore practical use cases and implementation strategies</li> </ul>"},{"location":"exemptions/","title":"Exemptions Configuration","text":"<p>Exemptions allow you to exclude specific resources or resource types from certain tag requirements. Create a YAML or JSON file with your exemptions.</p>"},{"location":"exemptions/#exemption-fields","title":"Exemption Fields","text":"<ul> <li><code>resource_type</code>: The AWS resource type (e.g., aws_s3_bucket, aws_instance)</li> <li><code>resource_name</code>: The name of the specific resource to exempt. Use \"*\" to exempt all resources of the specified type</li> <li><code>exempt_tags</code>: List of tags that are not required for this resource</li> <li><code>reason</code>: A description explaining why this exemption exists</li> </ul>"},{"location":"exemptions/#yaml-example","title":"YAML Example","text":"<pre><code>exemptions:\n  - resource_type: aws_s3_bucket\n    resource_name: logs_bucket\n    exempt_tags: [Owner, Project]\n    reason: \"Legacy bucket used for system logs only\"\n\n  - resource_type: aws_dynamodb_table\n    resource_name: \"*\"\n    exempt_tags: [Environment]\n    reason: \"DynamoDB tables use environment from provider default_tags\"\n</code></pre>"},{"location":"exemptions/#json-example","title":"JSON Example","text":"<pre><code>{\n  \"exemptions\": [\n    {\n      \"resource_type\": \"aws_s3_bucket\",\n      \"resource_name\": \"logs_bucket\",\n      \"exempt_tags\": [\"Owner\", \"Project\"],\n      \"reason\": \"Legacy bucket used for system logs only\"\n    },\n    {\n      \"resource_type\": \"aws_dynamodb_table\",\n      \"resource_name\": \"*\",\n      \"exempt_tags\": [\"Environment\"],\n      \"reason\": \"DynamoDB tables use environment from provider default_tags\"\n    }\n  ]\n}\n</code></pre>"},{"location":"exemptions/#exemption-reporting","title":"Exemption Reporting","text":"<p>Exemptions are now tracked and reported in the HTML compliance reports. When a resource is exempt from tagging requirements:</p> <ol> <li>The resource is highlighted with a distinct color in the report</li> <li>The exemption reason is displayed with the resource details</li> <li>Exempt tags are clearly marked in the tag status table</li> <li>Exempt resources are counted separately in the compliance summary statistics</li> </ol> <p>This provides transparency into which resources have exemptions and why, making it easier to track and manage exemptions over time.</p>"},{"location":"exemptions/#example-exemption-in-reports","title":"Example Exemption in Reports","text":"<p>In the HTML reports, exempt resources are displayed with:</p> <ul> <li>An \"Exempt\" status label</li> <li>The specific reason for the exemption</li> <li>Tags marked as \"Exempt\" rather than \"Missing\"</li> <li>A different background color to distinguish them from compliant and non-compliant resources</li> </ul>"},{"location":"exemptions/#when-to-use-exemptions","title":"When to Use Exemptions","text":"<p>Exemptions are useful in several scenarios:</p> <ol> <li>Legacy Resources: Older resources that cannot be easily updated</li> <li>Special Purpose Resources: Resources with a specific purpose that don't fit the standard tagging model</li> <li>Default Tag Inheritance: Resources that inherit tags from other sources</li> </ol>"},{"location":"exemptions/#best-practices-for-exemptions","title":"Best Practices for Exemptions","text":"<ol> <li>Document Reasons: Always include a clear reason for each exemption</li> <li>Regular Review: Periodically review exemptions to see if they're still necessary</li> <li>Minimize Use: Use exemptions sparingly to maintain consistent tagging</li> <li>Specific Scope: Make exemptions as specific as possible (prefer specific resource names over wildcards)</li> <li>Version Control: Keep your exemptions file in version control</li> </ol>"},{"location":"installation/","title":"Installation","text":"<p>Terratags can be installed in multiple ways. You don't need to have Go installed to use Terratags.</p>"},{"location":"installation/#binary-installation","title":"Binary Installation","text":"<p>The easiest way to install Terratags is to download a pre-built binary from the GitHub Releases page:</p> <ol> <li>Download the appropriate binary for your operating system (Windows, macOS, or Linux)</li> <li>Extract the archive if necessary</li> <li>Move the binary to a directory in your PATH</li> </ol>"},{"location":"installation/#linuxmacos","title":"Linux/macOS","text":"<pre><code># Example for Linux amd64\ncurl -L https://github.com/terratags/terratags/releases/latest/download/terratags_linux_amd64.tar.gz | tar xz\nsudo mv terratags /usr/local/bin/\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<p>Download the appropriate .zip file from the releases page, extract it, and add the location to your PATH.</p>"},{"location":"installation/#homebrew-installation-macoslinux","title":"Homebrew Installation (macOS/Linux)","text":"<p>If you use Homebrew, you can install Terratags with:</p> <pre><code>brew install terratags/tap/terratags\n</code></pre>"},{"location":"installation/#go-installation-alternative","title":"Go Installation (Alternative)","text":"<p>If you have Go installed, you can also install Terratags using Go's package manager:</p> <pre><code>go install github.com/terratags/terratags@latest\n</code></pre> <p>This will download and install the latest version of Terratags to your Go bin directory.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Terraform (for analyzing Terraform configurations)</li> </ul>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, you can verify that Terratags is installed correctly by running:</p> <pre><code>terratags -version\n</code></pre> <p>This should display the current version of Terratags.</p>"},{"location":"installation/#building-from-source","title":"Building from Source","text":"<p>If you prefer to build from source:</p> <pre><code>git clone https://github.com/terratags/terratags.git\ncd terratags\ngo build\n</code></pre> <p>This will create a <code>terratags</code> binary in your current directory.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, you'll need to:</p> <ol> <li>Create a configuration file that defines your required tags</li> <li>Run Terratags against your Terraform code</li> <li>Review the results and fix any non-compliant resources</li> </ol>"},{"location":"logging/","title":"Logging","text":"<p>Terratags provides a flexible logging system that allows you to control the verbosity and detail of output during execution.</p>"},{"location":"logging/#log-levels","title":"Log Levels","text":"<p>Terratags supports the following log levels, in order of increasing severity:</p> <ul> <li><code>DEBUG</code>: Detailed information, typically useful only for diagnosing problems</li> <li><code>INFO</code>: Confirmation that things are working as expected</li> <li><code>WARN</code>: Indication that something unexpected happened, but the process can continue</li> <li><code>ERROR</code>: Due to a more serious problem, the process couldn't perform a specific function</li> </ul>"},{"location":"logging/#setting-the-log-level","title":"Setting the Log Level","text":"<p>You can set the log level using the <code>-log-level</code> or <code>-l</code> command-line flag:</p> <pre><code>terratags -config config.yaml -log-level DEBUG\n</code></pre> <p>Or using the short form:</p> <pre><code>terratags -c config.yaml -l DEBUG\n</code></pre> <p>The default log level is <code>ERROR</code> if not specified.</p>"},{"location":"logging/#log-output-format","title":"Log Output Format","text":"<p>Here are examples of how logs appear at different levels:</p>"},{"location":"logging/#debug-level-output","title":"DEBUG Level Output","text":"<pre><code>DEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tags attribute in awscc_s3_bucket name\nDEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tag key: Name with value: test\n</code></pre>"},{"location":"logging/#info-level-output","title":"INFO Level Output","text":"<pre><code>INFO    2025-05-18T20:33:48.265-0400    Loaded configuration with 4 required tags\nINFO    2025-05-18T20:33:48.266-0400    Validating Terraform directory: ../awscc_examples/\nINFO    2025-05-18T20:33:48.267-0400    Found 1 Terraform files to analyze\nINFO    2025-05-18T20:33:48.267-0400    Analyzing file: ../awscc_examples/main.tf\n</code></pre>"},{"location":"logging/#warn-level-output","title":"WARN Level Output","text":"<pre><code>WARN    2025-05-18T20:33:48.269-0400    Warning: Some blocks in main.tf couldn't be parsed, but we'll continue with what we can parse\nWARN    2025-05-18T20:33:48.269-0400    Error parsing provider blocks in main.tf: invalid syntax\n</code></pre>"},{"location":"logging/#error-level-output","title":"ERROR Level Output","text":"<pre><code>ERROR   2025-05-18T20:33:48.270-0400    Failed to parse configuration file: invalid syntax at line 15\n</code></pre>"},{"location":"logging/#logging-in-cicd-environments","title":"Logging in CI/CD Environments","text":"<p>When using Terratags in CI/CD pipelines, consider the following:</p> <ol> <li>Use the default ERROR level for normal operation to keep logs clean</li> <li>Use the INFO level for more detailed output when debugging pipeline issues</li> <li>Consider using the <code>-report</code> option to generate an HTML report for better visualization of results</li> <li>Redirect logs to a file for later analysis if needed</li> </ol> <p>Example GitHub Actions workflow:</p> <pre><code>- name: Validate Tags\n  run: |\n    terratags -config config.yaml -dir ./infra -log-level INFO -report report.html\n  continue-on-error: true\n\n- name: Upload Report\n  uses: actions/upload-artifact@v3\n  with:\n    name: tag-validation-report\n    path: report.html\n</code></pre>"},{"location":"logging/#technical-implementation","title":"Technical Implementation","text":"<p>Terratags uses a logging implementation based on Zap.</p>"},{"location":"pre-commit/","title":"Pre-commit Hook Integration","text":"<p>Terratags can be integrated with pre-commit to automatically validate tags before commits are made to your repository.</p>"},{"location":"pre-commit/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install pre-commit:    <pre><code>pip install pre-commit\n</code></pre></p> </li> <li> <p>Ensure you have a terratags configuration file in your repository (see Configuration)</p> </li> </ol>"},{"location":"pre-commit/#basic-setup","title":"Basic Setup","text":"<ol> <li>Create or update your <code>.pre-commit-config.yaml</code> file in your repository root:</li> </ol> <pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v2.x.y \n    hooks:\n      - id: terratags\n</code></pre> <ol> <li> <p>Install the pre-commit hook:    <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Create your <code>terratags.yaml</code> configuration file:    <pre><code>required_tags:\n  - Environment\n  - Owner\n  - Project\n</code></pre></p> </li> </ol>"},{"location":"pre-commit/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"pre-commit/#custom-configuration-file","title":"Custom Configuration File","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v2.x.y\n    hooks:\n      - id: terratags\n        args: [--config=custom-config.yaml]\n</code></pre>"},{"location":"pre-commit/#generate-html-report","title":"Generate HTML Report","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v2.x.y\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --report=tag-report.html]\n</code></pre>"},{"location":"pre-commit/#show-remediation-suggestions","title":"Show Remediation Suggestions","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v2.x.y\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --remediate]\n</code></pre>"},{"location":"pre-commit/#use-exemptions","title":"Use Exemptions","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v2.x.y\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --exemptions=exemptions.yaml]\n</code></pre>"},{"location":"pre-commit/#custom-directory","title":"Custom Directory","text":"<pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v2.x.y\n    hooks:\n      - id: terratags\n        args: [--config=terratags.yaml, --dir=./infrastructure]\n</code></pre>"},{"location":"pre-commit/#multiple-hook-configurations","title":"Multiple Hook Configurations","text":"<p>You can define multiple hooks for different purposes:</p> <pre><code>repos:\n  - repo: https://github.com/terratags/terratags\n    rev: v2.x.y\n    hooks:\n      # Basic validation on every commit\n      - id: terratags\n        name: terratags-validate\n        args: [--config=terratags.yaml]\n\n      # Generate report (manual stage)\n      - id: terratags\n        name: terratags-report\n        args: [--config=terratags.yaml, --report=reports/tags.html]\n        stages: [manual]\n\n      # Show remediation suggestions\n      - id: terratags\n        name: terratags-remediate\n        args: [--config=terratags.yaml, --remediate]\n        stages: [manual]\n</code></pre>"},{"location":"pre-commit/#usage-examples","title":"Usage Examples","text":""},{"location":"pre-commit/#basic-workflow","title":"Basic Workflow","text":"<ol> <li>Make changes to your Terraform files</li> <li>Attempt to commit:    <pre><code>git add .\ngit commit -m \"Add new resources\"\n</code></pre></li> <li>Terratags will automatically run and validate your tags</li> <li>If validation fails, fix the issues and commit again</li> </ol>"},{"location":"pre-commit/#manual-report-generation","title":"Manual Report Generation","text":"<pre><code># Run terratags report generation\npre-commit run terratags-report --hook-stage manual\n\n# Run terratags with remediation suggestions\npre-commit run terratags-remediate --hook-stage manual\n</code></pre>"},{"location":"pre-commit/#skip-hook-for-emergency-commits","title":"Skip Hook for Emergency Commits","text":"<pre><code># Skip all pre-commit hooks\ngit commit -m \"Emergency fix\" --no-verify\n\n# Skip only terratags hook\nSKIP=terratags git commit -m \"Skip terratags validation\"\n</code></pre>"},{"location":"pre-commit/#file-filtering","title":"File Filtering","text":"<p>The terratags pre-commit hook is configured to only run on Terraform configuration files: - <code>*.tf</code> files</p> <p>This ensures the hook only runs when relevant files are changed, improving performance.</p> <p>Note: Pre-commit hooks validate Terraform source files only. For validating Terraform plan output, use the <code>--plan</code> flag in your CI/CD pipeline as described in the main README.</p>"},{"location":"pre-commit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pre-commit/#hook-not-running","title":"Hook Not Running","text":"<ol> <li>Ensure pre-commit is installed: <code>pre-commit --version</code></li> <li>Ensure hooks are installed: <code>pre-commit install</code></li> <li>Check your <code>.pre-commit-config.yaml</code> syntax</li> </ol>"},{"location":"pre-commit/#configuration-file-not-found","title":"Configuration File Not Found","text":"<ol> <li>Ensure your terratags configuration file exists in the repository root</li> <li>Use the <code>--config</code> argument to specify a custom path</li> <li>Check the file name matches what you specified in args</li> </ol>"},{"location":"pre-commit/#validation-failures","title":"Validation Failures","text":"<ol> <li>Use <code>--remediate</code> to see suggested fixes</li> <li>Check exemptions if certain resources should be excluded</li> <li>Review your required tags configuration</li> </ol>"},{"location":"pre-commit/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>Pre-commit hooks work well with CI/CD pipelines. You can run the same validations in your CI:</p> <pre><code># GitHub Actions example\n- name: Run pre-commit\n  uses: pre-commit/action@v3.0.0\n</code></pre> <p>This ensures that even if developers skip local pre-commit hooks, the validation still runs in CI.</p>"},{"location":"providers/","title":"Supported Providers","text":"<p>This document lists the providers and versions supported by Terratags.</p> Provider Version azapi 2.4.0 aws 5.99.1 awscc 1.43.0 azurerm 4.31.0 <p>This file is automatically generated by the <code>update_resources.go</code> script.</p>"},{"location":"sample-reports/","title":"Sample HTML Reports","text":""},{"location":"sample-reports/#module-blocks-report","title":"Module Blocks Report","text":""},{"location":"sample-reports/#resource-blocks-report","title":"Resource Blocks Report","text":""},{"location":"sample-reports/#provider-default-tags-report","title":"Provider Default Tags Report","text":""},{"location":"sample-reports/#awscc-resources-report","title":"AWSCC Resources Report","text":"<p>This report shows how Terratags handles AWSCC resources, including the new \"Excluded\" category for resources with non-compliant tag schemas.</p>"},{"location":"usage/","title":"Usage","text":"<p>Terratags can be used in various ways to validate tags on AWS resources in your Terraform configurations.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>The basic usage of Terratags is:</p> <pre><code>terratags -config config.yaml -dir ./infra\n</code></pre> <p>This command will analyze all Terraform files in the specified directory and validate that AWS resources have the required tags as defined in your configuration file.</p>"},{"location":"usage/#command-examples","title":"Command Examples","text":""},{"location":"usage/#generate-html-report","title":"Generate HTML Report","text":"<p>Generate a detailed HTML report of tag compliance:</p> <pre><code>terratags -config config.yaml -dir ./infra -report report.html\n</code></pre>"},{"location":"usage/#validate-terraform-plan","title":"Validate Terraform Plan","text":"<p>Validate tags in a Terraform plan output:</p> <pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre>"},{"location":"usage/#show-auto-remediation-suggestions","title":"Show Auto-remediation Suggestions","text":"<p>Get suggestions for fixing non-compliant resources:</p> <pre><code>terratags -config config.yaml -dir ./infra -remediate\n</code></pre>"},{"location":"usage/#use-exemptions","title":"Use Exemptions","text":"<p>Apply exemptions to specific resources:</p> <pre><code>terratags -config config.yaml -dir ./infra -exemptions exemptions.yaml\n</code></pre>"},{"location":"usage/#verbose-output","title":"Verbose Output","text":"<p>For more detailed output, use the <code>-verbose</code> flag:</p> <pre><code>terratags -config config.yaml -dir ./infra -verbose\n</code></pre> <p>This will show additional information about the validation process, including:</p> <ul> <li>Files being analyzed</li> <li>Resources being checked</li> <li>Tag inheritance from default_tags</li> <li>Exemptions being applied</li> </ul>"},{"location":"usage/#exit-codes","title":"Exit Codes","text":"<p>Terratags uses the following exit codes:</p> <ul> <li><code>0</code>: All resources are compliant with tagging requirements</li> <li><code>1</code>: One or more resources are missing required tags</li> <li><code>2</code>: Error in configuration or execution</li> </ul> <p>This makes it easy to integrate Terratags into CI/CD pipelines and fail builds when tag requirements are not met.</p>"},{"location":"usage/#working-with-large-codebases","title":"Working with Large Codebases","text":"<p>For large Terraform codebases, you can:</p> <ol> <li> <p>Run Terratags on specific directories:    <pre><code>terratags -config config.yaml -dir ./infra/modules/networking\n</code></pre></p> </li> <li> <p>Use the plan-based approach to only validate resources that are changing:    <pre><code>terraform plan -out=tfplan -target=module.networking\nterraform show -json tfplan &gt; plan.json\nterratags -config config.yaml -plan plan.json\n</code></pre></p> </li> </ol>"},{"location":"usage/#html-reports","title":"HTML Reports","text":"<p>The HTML report provides a visual representation of tag compliance across your Terraform resources, making it easy to identify which resources need attention and track compliance metrics.</p> <p>To generate a report:</p> <pre><code>terratags -config config.yaml -dir ./infra -report report.html\n</code></pre> <p>The report includes:</p> <ul> <li>Overall compliance percentage</li> <li>List of compliant and non-compliant resources</li> <li>Missing tags for each non-compliant resource</li> <li>Summary statistics</li> </ul>"},{"location":"usage/#log-levels","title":"Log Levels","text":"<p>Terratags supports different log levels to control the verbosity of output:</p> <pre><code>terratags -config config.yaml -dir ./infra -log-level INFO\n</code></pre> <p>Available log levels:</p> <ul> <li><code>DEBUG</code>: Shows all debug information, including detailed tag discovery</li> <li><code>INFO</code>: Shows informational messages (same as using the <code>-verbose</code> flag)</li> <li><code>WARN</code>: Shows only warnings and errors</li> <li><code>ERROR</code>: Shows only errors (default)</li> </ul> <p>For backward compatibility, the <code>-verbose</code> flag is equivalent to <code>-log-level INFO</code>.</p>"},{"location":"usage/#case-insensitive-tag-matching","title":"Case-Insensitive Tag Matching","text":"<p>By default, Terratags performs case-sensitive matching for tag keys. To enable case-insensitive matching, use the <code>-ignore-case</code> flag:</p> <pre><code>terratags -config config.yaml -dir ./infra -ignore-case\n</code></pre> <p>With this option enabled, tag keys like \"Environment\", \"ENVIRONMENT\", and \"environment\" will all match a required tag key \"Environment\".</p>"},{"location":"user-scenarios/","title":"User Scenarios","text":""},{"location":"user-scenarios/#scenario-1-multi-environment-deployment","title":"Scenario 1: Multi-Environment Deployment","text":"<p>For a project with multiple environments, you might have different tag requirements for each environment:</p> <pre><code># dev-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n</code></pre> <pre><code># prod-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n  - CostCenter\n  - DataClassification\n</code></pre> <p>You can then validate each environment with the appropriate configuration:</p> <pre><code>terratags -config dev-config.yaml -dir ./infra/environments/dev\nterratags -config prod-config.yaml -dir ./infra/environments/prod\n</code></pre>"},{"location":"user-scenarios/#scenario-2-gradual-tag-implementation","title":"Scenario 2: Gradual Tag Implementation","text":"<p>When implementing tagging policies gradually, you might start with a subset of required tags and add more over time:</p> <pre><code># phase1-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n</code></pre> <pre><code># phase2-config.yaml\nrequired_tags:\n  - Name\n  - Environment\n  - Owner\n  - Project\n</code></pre> <p>You can use exemptions to gradually roll out the new requirements:</p> <pre><code># phase2-exemptions.yaml\nexemptions:\n  - resource_type: \"*\"\n    resource_name: \"*\"\n    exempt_tags: [Project]\n    reason: \"Project tag requirement being phased in\"\n</code></pre> <pre><code>terratags -config phase2-config.yaml -dir ./infra -exemptions phase2-exemptions.yaml\n</code></pre> <p>As teams update their resources, you can remove exemptions until all resources comply with the full tagging policy.</p>"},{"location":"assets/logging/","title":"Logging","text":"<p>Terratags provides a flexible logging system that allows you to control the verbosity and detail of output during execution. This document explains how to configure and use the logging functionality.</p>"},{"location":"assets/logging/#log-levels","title":"Log Levels","text":"<p>Terratags supports the following log levels, in order of increasing severity:</p> <ul> <li><code>DEBUG</code>: Detailed information, typically useful only for diagnosing problems</li> <li><code>INFO</code>: Confirmation that things are working as expected</li> <li><code>WARN</code>: Indication that something unexpected happened, but the process can continue</li> <li><code>ERROR</code>: Due to a more serious problem, the process couldn't perform a specific function</li> </ul>"},{"location":"assets/logging/#setting-the-log-level","title":"Setting the Log Level","text":"<p>You can set the log level using the <code>-log-level</code> or <code>-l</code> command-line flag:</p> <pre><code>terratags -config config.yaml -log-level DEBUG\n</code></pre> <p>Or using the short form:</p> <pre><code>terratags -c config.yaml -l DEBUG\n</code></pre> <p>The default log level is <code>ERROR</code> if not specified.</p>"},{"location":"assets/logging/#examples","title":"Examples","text":""},{"location":"assets/logging/#basic-usage","title":"Basic Usage","text":"<pre><code># Run with default ERROR level logging\nterratags -config config.yaml\n\n# Run with INFO level for more detailed output\nterratags -config config.yaml -log-level INFO\n\n# Run with DEBUG level for maximum verbosity\nterratags -config config.yaml -log-level DEBUG\n</code></pre>"},{"location":"assets/logging/#troubleshooting","title":"Troubleshooting","text":"<p>If you're experiencing issues with Terratags, running with the <code>DEBUG</code> log level can provide additional information to help diagnose the problem:</p> <pre><code>terratags -config config.yaml -log-level DEBUG\n</code></pre> <p>This will output detailed information about each step of the process, including file parsing, tag validation, and any errors encountered.</p>"},{"location":"assets/logging/#log-output-format","title":"Log Output Format","text":"<p>Terratags uses a custom logging format where the log level appears before the timestamp. Here are examples of how logs appear at different levels:</p>"},{"location":"assets/logging/#debug-level-output","title":"DEBUG Level Output","text":"<pre><code>DEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tags attribute in awscc_s3_bucket name\nDEBUG   2025-05-18T20:33:48.268-0400    Found AWSCC tag key: Name with value: test\n</code></pre>"},{"location":"assets/logging/#info-level-output","title":"INFO Level Output","text":"<pre><code>INFO    2025-05-18T20:33:48.265-0400    Loaded configuration with 4 required tags\nINFO    2025-05-18T20:33:48.266-0400    Validating Terraform directory: ../awscc_examples/\nINFO    2025-05-18T20:33:48.267-0400    Found 1 Terraform files to analyze\nINFO    2025-05-18T20:33:48.267-0400    Analyzing file: ../awscc_examples/main.tf\n</code></pre>"},{"location":"assets/logging/#warn-level-output","title":"WARN Level Output","text":"<pre><code>WARN    2025-05-18T20:33:48.269-0400    Resource aws_s3_bucket.example is missing required tag: Environment\n</code></pre>"},{"location":"assets/logging/#error-level-output","title":"ERROR Level Output","text":"<pre><code>ERROR   2025-05-18T20:33:48.270-0400    Failed to parse configuration file: invalid syntax at line 15\n</code></pre>"},{"location":"assets/logging/#logging-implementation","title":"Logging Implementation","text":"<p>Terratags uses a custom logging implementation based on Zap, which provides:</p> <ul> <li>High-performance, structured logging</li> <li>Configurable output formats</li> <li>Multiple log levels</li> </ul>"}]}